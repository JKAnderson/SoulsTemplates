//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: FilterParam.bt
//   Authors: TKGP
//   Version: 
//   Purpose: 
//  Category: Dantelion
// File Mask: *.fltparam, *.gparam
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "Util.bt"

// Encoding to use for 8-bit strings
// This should be JAPANESE for all cases I'm aware of
// except the DS2 NT, which uses UTF8 for some reason.
local int CHARSET8 <hidden=true> = CHARSET_JAPANESE;

LittleEndian();
local int shortMagic <hidden=true> = ReadString(0, 4) == "filt";
local int versionOffset <hidden=true> = shortMagic ? 4 : 8;
if (ReadInt(versionOffset) >> 16)
    BigEndian();

typedef struct {
    float x;
    float y;
    quad pad <hidden=true>; Assert(pad == 0);
} PaddedVector2 <optimize=false>;

typedef struct {
    float x;
    float y;
    float z;
    int pad <hidden=true>; Assert(pad == 0);
} PaddedVector3 <optimize=false>;

typedef struct {
    byte r;
    byte g;
    byte b;
    byte a;
} RGBA8;

struct Struct4;
struct Struct6;

//------------------------------------------------

typedef struct {
    if (shortMagic) {
        char magic[4];
    } else {
        wchar_t magic[4];
    } Assert(magic == "filt");
    int version; Assert(version == 2 || version == 3 || version == 5);
    short unk08; Assert(unk08 == 0 || unk08 == 0x100);
    short unk0A <hidden=true>; Assert(unk0A == 0);
    int section1Count;
    int section7Count;
    int section1Offset <format=hex>;
    int section2Offset <format=hex>;
    int section3Offset <format=hex>;
    int section4Offset <format=hex>;
    int section5Offset <format=hex>;
    int section6Offset <format=hex>;
    int section7Offset <format=hex>;
    int section8Count;
    int section8Offset <format=hex>;
    int section9Offset <format=hex>;
    float unk3C;
    if (version >= 3) {
        int section10Offset <format=hex>;
        int section11Offset <format=hex>;
        int section12Offset <format=hex>;
    }
    if (version >= 5) {
        float unk50;
    }
} Header <bgcolor=cLtRed>;


typedef struct {
    int section3Count;
    int section3Offset <format=hex>;
    if (header.version <= 2) {
        string name;
    } else {
        wstring name;
    }
    if (header.version >= 3) {
        wstring displayName;
    }
    
    if (section3Count > 0) {
        local quad pos <hidden=true> = FTell();
        FSeek(header.section3Offset + section3Offset);
        int section3[section3Count] <format=hex, bgcolor=cDkGreen>;
        
        struct {
            local int i <hidden=true>;
            for (i = 0; i < section3Count; i++) {
                FSeek(header.section4Offset + section3[i]);
                Struct4 struct4s;
            }
        } section4;
        FSeek(pos);
    }
} Struct2 <read=ReadStruct2, bgcolor=cGreen>;

wstring ReadStruct2(Struct2& struct2) {
    if (header.version <= 3) {
        return StringToWString(struct2.name, CHARSET8);
    } else {
        return struct2.name;
    }
}


typedef struct {
    int section5Offset <format=hex>;
    int section6Offset <format=hex>;
    byte valueType;
    byte valueCount;
    short pad <hidden=true>; Assert(pad == 0);
    if (header.version <= 2) {
        string name;
    } else {
        wstring name;
    }
    if (header.version >= 3) {
        wstring displayName;
    }
    
    if (valueCount > 0) {
        local quad pos <hidden=true> = FTell();
        FSeek(header.section5Offset + section5Offset);
        SetBackColor(cAqua);
        switch (valueType) {
            case 1: byte values[valueCount]; Assert(valueCount == 1); break;
            case 2: short values[valueCount]; break;
            case 3: int values[valueCount]; break;
            case 5: byte values[valueCount]; break; // bool
            case 7: int values[valueCount]; break;
            case 9: float values[valueCount]; break;
            case 11: byte values[valueCount]; break;
            case 12: struct { PaddedVector2 values[valueCount]; } values; break;
            case 13: struct { PaddedVector3 values[valueCount]; } values; break;
            case 14: Vector4 values[valueCount]; break;
            case 15: RGBA8 values[valueCount]; break;
            
            default: Assert(false);
        }
        
        FSeek(header.section6Offset + section6Offset);
        struct { Struct6 struct6s[valueCount]; } section6;
        FSeek(pos);
    }
} Struct4 <read=ReadStruct4, bgcolor=cDkGreen>;

wstring ReadStruct4(Struct4& struct4) {
    if (header.version <= 3) {
        return StringToWString(struct4.name, CHARSET8);
    } else {
        return struct4.name;
    }
}


typedef struct {
    int unk00;
    if (header.version >= 5) {
        float unk04;
    }
} Struct6 <read=ReadStruct6, bgcolor=cDkAqua, optimize=false>;

string ReadStruct6(Struct6& struct6) {
    string str;
    if (header.version <= 4) {
        SPrintf(str, "%i", struct6.unk00);
    } else {
        SPrintf(str, "%i %f", struct6.unk00, struct6.unk04);
    }
    return str;
}


typedef struct {
    int unk00;
    int idCount;
    int idsOffset <format=hex>;
    if (header.version >= 5) {
        int unk0C;
    }
    
    if (idCount > 0) {
        local quad pos <hidden=true> = FTell();
        FSeek(header.section9Offset + idsOffset);
        int ids[idCount] <bgcolor=cBlue>;
        FSeek(pos);
    }
} Struct8 <bgcolor=cLtBlue, optimize=false>;

//------------------------------------------------

Header header;

if (header.section1Count > 0) {
    FSeek(header.section1Offset);
    int section1[header.section1Count] <format=hex, bgcolor=cLtGreen>;
    
    struct {
        local int i <hidden=true>;
        for (i = 0; i < header.section1Count; i++) {
            FSeek(header.section2Offset + section1[i]);
            Struct2 struct2s;
        }
    } section2;
}

if (header.section7Count > 0) {
    FSeek(header.section7Offset);
    // This is obviously super gross, but it's the only consistent method I've found
    // The count does not match the number of groups nor the number of values
    local int section7Length <hidden=true> = header.section8Offset - header.section7Offset;
    local int struct7Length <hidden=true> = section7Length / header.section7Count;
    struct {
        if (header.version <= 2) {
            byte struct7[struct7Length];
        } else {
            int struct7[struct7Length / 4];
        }
    } section7[header.section7Count] <bgcolor=cBlack, fgcolor=cWhite, optimize=true>;
}

if (header.section8Count > 0) {
    FSeek(header.section8Offset);
    struct {
     Struct8 struct8s[header.section8Count];
    } section8;
}

if (header.version >= 3 && header.section1Count > 0) {
    FSeek(header.section10Offset);
    int section10[header.section1Count] <format=hex, bgcolor=cLtYellow>;
    
    struct {
        local int i <hidden=true>;
        local int j <hidden=true>;
        local int valueCount <hidden=true>;
        for (i = 0; i < header.section1Count; i++) {
            FSeek(header.section11Offset + section10[i]);
            valueCount = section2.struct2s[i].section3Count == 0 ? 0
                : section2.struct2s[i].section4.struct4s[0].valueCount;
            
            struct {
                if (valueCount > 0) {
                    int section12Offsets[valueCount] <bgcolor=cYellow>;
                
                    local quad pos <hidden=true> = FTell();
                    for (j = 0; j < valueCount; j++) {
                        FSeek(header.section12Offset + section12Offsets[j]);
                        WrappedWString comments <bgcolor=cDkYellow>;
                    }
                    FSeek(pos);
                }
            } struct11s;
        }
    } section11;
}
