//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: Other\SMD4.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Armored Core 4 auxiliary model format?
//  Category: Dantelion
// File Mask: *.smd
//  ID Bytes: 53 4D 44 34
//   History: 
//------------------------------------------------

#include "..\Util.bt"

BigEndian();

//------------------------------------------------

typedef struct {
    char magic[4]; Assert(magic == "SMD4");
    int version <format=hex>; Assert(version == 0x40001);
    int dataStart <format=hex>;
    int dataLength <format=hex>;
    int countA;
    int countB;
    int unk18;
    int unk1C;
    Vector3 unk20;
    Vector3 unk2C;
    int faceCount;
    int unk3C;
    
    local int i <hidden=true>;
    for (i = 0; i < 8; i++) {
        int unk40 <hidden=true>; Assert(unk40 == 0);
    }
} Header <bgcolor=cLtRed>;


typedef struct {
    int unk00; // Index

    local int i <hidden=true>;
    for (i = 0; i < 8; i++) {
        int unk04 <hidden=true>; Assert(unk04 == 0);
    }
} EntryA <bgcolor=cLtGreen, optimize=false>;


typedef struct {
    char name[0x20];
    Vector3 unk20;
    Vector3 unk2C;
    Vector3 unk38;
    Vector3 unk44;
    Vector3 unk50;
    short unk5C[4];
    int unk64;
    int unk68;
    int unk6C;
    int unk70[8];
} EntryB <bgcolor=cAqua, optimize=false>;

//------------------------------------------------

Header header;
struct{ EntryA entriesA[header.countA]; } entriesA;
EntryB entriesB[header.countB];
