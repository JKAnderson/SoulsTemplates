//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MSBE\Event.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Elden Ring MSB events
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <int> EventType {
    EventTypeTreasure = 4,
    EventTypeGenerator = 5,
    EventTypeObjAct = 7,
    EventTypeNavmesh = 10,
    EventTypePseudoMultiplayer = 12,
    EventTypePlatoonInfo = 15,
    EventTypePatrolInfo = 20,
    EventTypeMount = 21,
    EventTypeSignPool = 23,
    EventTypeRetryPoint = 24,
    EventTypeOther = -1,
};

struct EventUnk3;

struct EventTreasure;
struct EventGenerator;
struct EventObjAct;
struct EventNavmesh;
struct EventPseudoMultiplayer;
struct EventPlatoonInfo;
struct EventPatrolInfo;
struct EventMount;
struct EventSignPool;
struct EventRetryPoint;

//------------------------------------------------

typedef struct {
    local quad start <hidden=true> = FTell();
    
    quad nameOffset <format=hex>;
    int eventIndex;
    EventType type;
    int id;
    int unk14; Assert(IsBool(unk14));
    quad entityDataOffset <format=hex>;
    quad typeDataOffset <format=hex>;
    quad unkOffset3 <format=hex>;

    Assert(nameOffset > 0);    
    FSeek(start + nameOffset);
    wstring name;
    
    Assert(entityDataOffset > 0);
    FSeek(start + entityDataOffset);
    int partIndex; // Dubious whether these are still correct
    int pointIndex;
    int entityID;
    byte unkE0C;
    byte unkE0D <hidden=true>; Assert(unkE0D == 0);
    byte unkE0E <hidden=true>; Assert(unkE0E == 0);
    byte unkE0F <hidden=true>; Assert(unkE0F == 0);
    
    if (type == EventTypeOther) {
        Assert(typeDataOffset == 0);
    } else {
        Assert(typeDataOffset > 0);
        FSeek(start + typeDataOffset);
        switch (type) {
            case EventTypeTreasure: EventTreasure treasure; break;
            case EventTypeGenerator: EventGenerator generator; break;
            case EventTypeObjAct: EventObjAct objAct; break;
            case EventTypeNavmesh: EventNavmesh navmesh; break;
            case EventTypePseudoMultiplayer: EventPseudoMultiplayer pseudoMultiplayer; break;
            case EventTypePlatoonInfo: EventPlatoonInfo platoonInfo; break;
            case EventTypePatrolInfo: EventPatrolInfo patrolInfo; break;
            case EventTypeMount: EventMount mount; break;
            case EventTypeSignPool: EventSignPool signPool; break;
            case EventTypeRetryPoint: EventRetryPoint retryPoint; break;
            
            default: Assert(false);
        }
    }
    
    Assert(unkOffset3 > 0);
    FSeek(start + unkOffset3);
    EventUnk3 unk3;
} Event <read=ReadEvent>;

wstring ReadEvent(Event& event) {
    string str;
    SPrintf(str, "%2i ", event.type);
    return str + event.name;
}

//------------------------------------------------

typedef struct {
    int mapID <format=hex>; // The usual 4 bytes as an actual LE int; -1 for none
    int unk04;
    int unk08;
    int unk0C;
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
} EventUnk3;

//------------------------------------------------

typedef struct {
    int unk00 <hidden=true>; Assert(unk00 == 0);
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int partIndex;
    int unk0C <hidden=true>; Assert(unk0C == 0);
    int itemLot;
    int itemLot2 <hidden=true>; Assert(itemLot2 == -1);
    int unk18 <hidden=true>; Assert(unk18 == -1);
    int unk1C <hidden=true>; Assert(unk1C == -1);
    int unk20 <hidden=true>; Assert(unk20 == -1);
    int unk24 <hidden=true>; Assert(unk24 == -1);
    int unk28 <hidden=true>; Assert(unk28 == -1);
    int unk2C <hidden=true>; Assert(unk2C == -1);
    int unk30 <hidden=true>; Assert(unk30 == -1);
    int unk34 <hidden=true>; Assert(unk34 == -1);
    int actionButtonParamID;
    int pickupAnimID;
    byte inChest;
    byte startDisabled;
    short unk42 <hidden=true>; Assert(unk42 == 0);
    int unk44 <hidden=true>; Assert(unk44 == 0);
    int unk48 <hidden=true>; Assert(unk48 == 0);
    int unk4C <hidden=true>; Assert(unk4C == 0);
} EventTreasure;


typedef struct {
    byte maxNum;
    byte genType;
    short limitNum;
    short minGenNum;
    short maxGenNum;
    float minInterval;
    float maxInterval;
    byte initialSpawnCount;
    byte unk11 <hidden=true>; Assert(unk11 == 0);
    byte unk12 <hidden=true>; Assert(unk12 == 0);
    byte unk13 <hidden=true>; Assert(unk13 == 0);
    float unk14;
    float unk18;
    int unk1C <hidden=true>; Assert(unk1C == 0);
    int unk20 <hidden=true>; Assert(unk20 == 0);
    int unk24 <hidden=true>; Assert(unk24 == 0);
    int unk28 <hidden=true>; Assert(unk28 == 0);
    int unk2C <hidden=true>; Assert(unk2C == 0);
    int spawnPointIndices[8];
    int unk50 <hidden=true>; Assert(unk50 == 0);
    int unk54 <hidden=true>; Assert(unk54 == 0);
    int unk58 <hidden=true>; Assert(unk58 == 0);
    int unk5C <hidden=true>; Assert(unk5C == 0);
    int spawnPartIndices[32];
    int unkE0 <hidden=true>; Assert(unkE0 == 0);
    int unkE4 <hidden=true>; Assert(unkE4 == 0);
    int unkE8 <hidden=true>; Assert(unkE8 == 0);
    int unkEC <hidden=true>; Assert(unkEC == 0);
    int unkF0 <hidden=true>; Assert(unkF0 == 0);
    int unkF4 <hidden=true>; Assert(unkF4 == 0);
    int unkF8 <hidden=true>; Assert(unkF8 == 0);
    int unkFC <hidden=true>; Assert(unkFC == 0);
} EventGenerator;


typedef struct {
    int entityID;
    int partIndex;
    int objActParamID;
    byte stateType;
    byte unk0D <hidden=true>; Assert(unk0D == 0);
    byte unk0E <hidden=true>; Assert(unk0E == 0);
    byte unk0F <hidden=true>; Assert(unk0F == 0);
    int eventFlagID;
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
} EventObjAct;


typedef struct {
    int pointIndex;
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
} EventNavmesh;


typedef struct {
    int hostEntityID;
    int eventFlagID;
    int activateGoodsID;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
} EventPseudoMultiplayer;


typedef struct {
    int platoonIDScriptActive;
    int state;
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
    int groupPartIndices[32];
} EventPlatoonInfo;


typedef struct {
    byte unk00;
    byte unk01; Assert(unk01 == 0);
    byte unk02; Assert(unk02 == 0);
    byte unk03; Assert(unk03 == 1);
    int unk04; Assert(unk04 == -1);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
    short walkPointIndices[64];
} EventPatrolInfo;


typedef struct {
    int unk00;
    int unk04;
} EventMount;


typedef struct {
    int unk00;
    int unk04;
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
} EventSignPool;


typedef struct {
    int unk00;
    int unk04;
    float unk08;
    int unk0C;
} EventRetryPoint;
