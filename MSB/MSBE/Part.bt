//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MSBE\Part.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Elden Ring MSB parts
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <int> PartType {
    PartTypeMapPiece = 0,
    PartTypeEnemy = 2,
    PartTypePlayer = 4,
    PartTypeCollision = 5,
    PartTypeDummyAsset = 9, // Highly speculative
    PartTypeDummyEnemy = 10,
    PartTypeConnectCollision = 11,
    PartTypeAsset = 13,
};

struct PartUnk1;
struct PartUnk2;
struct PartEntity;
struct PartGparam;
struct PartSceneGparam;
struct PartUnk7;
struct PartUnk8;
struct PartUnk9;
struct PartUnk10;
struct PartUnk11;

struct PartMapPiece;
struct PartEnemy;
struct PartPlayer;
struct PartCollision;
struct PartDummyAsset;
struct PartConnectCollision;
struct PartAsset;

//------------------------------------------------

typedef struct {
    local quad start <hidden=true> = FTell();

    quad nameOffset <format=hex>;
    int unk08;
    PartType type;
    int id;
    int modelIndex;
    quad sibOffset <format=hex>;
    Vector3 position;
    Vector3 rotation;
    Vector3 scale;
    int unk44;
    int mapStudioLayer; // Is this still the same thing?
    int unk4C <hidden=true>; Assert(unk4C == 0);
    quad unkOffset1 <format=hex>;
    quad unkOffset2 <format=hex>;
    quad entityDataOffset <format=hex>;
    quad typeDataOffset <format=hex>;
    quad gparamOffset <format=hex>;
    quad sceneGparamOffset <format=hex>;
    quad unkOffset7 <format=hex>;
    quad unkOffset8 <format=hex>;
    quad unkOffset9 <format=hex>;
    quad unkOffset10 <format=hex>;
    quad unkOffset11 <format=hex>;
    quad unkA8 <hidden=true>; Assert(unkA8 == 0);
    quad unkB0 <hidden=true>; Assert(unkB0 == 0);
    quad unkB8 <hidden=true>; Assert(unkB8 == 0);
    
    Assert(nameOffset > 0);
    FSeek(start + nameOffset);
    wstring name;

    Assert(sibOffset > 0);
    FSeek(start + sibOffset);
    wstring sibPath;
    
    Assert(unkOffset1 > 0);
    FSeek(start + unkOffset1);
    PartUnk1 unk1;
    
    if (type == PartTypeCollision || type == PartTypeConnectCollision
        || type == PartTypeAsset) {
        Assert(unkOffset2 > 0);
        FSeek(start + unkOffset2);
        PartUnk2 unk2;
    } else {
        Assert(unkOffset2 == 0);
    }
    
    Assert(entityDataOffset > 0);
    FSeek(start + entityDataOffset);
    PartEntity entity;
    // Pad to 8
    
    Assert(typeDataOffset > 0);
    FSeek(start + typeDataOffset);
    switch (type) {
        case PartTypeMapPiece: PartMapPiece mapPiece; break;
        case PartTypeEnemy:
        case PartTypeDummyEnemy: PartEnemy enemy; break;
        case PartTypePlayer: PartPlayer player; break;
        case PartTypeCollision: PartCollision collision; break;
        case PartTypeDummyAsset: PartDummyAsset dummyAsset; break;
        case PartTypeConnectCollision: PartConnectCollision connectCollision; break;
        case PartTypeAsset: PartAsset asset; break;

        default: Assert(false);
    }
    
    if (type == PartTypeMapPiece || type == PartTypeEnemy
        || type == PartTypeCollision || type == PartTypeDummyAsset
        || type == PartTypeDummyEnemy || type == PartTypeAsset) {
        Assert(gparamOffset > 0);
        FSeek(start + gparamOffset);
        PartGparam gparam;
    } else {
        Assert(gparamOffset == 0);
    }
    
    if (type == PartTypeCollision) {
        Assert(sceneGparamOffset > 0);
        FSeek(start + sceneGparamOffset);
        PartSceneGparam sceneGparam;
    } else {
        Assert(sceneGparamOffset == 0);
    }

    if (type == PartTypeMapPiece || type == PartTypeAsset) {
        Assert(unkOffset7 > 0);
        FSeek(start + unkOffset7);
        PartUnk7 unk7;
    } else {
        Assert(unkOffset7 == 0);
    }

    Assert(unkOffset8 > 0);
    FSeek(start + unkOffset8);
    PartUnk8 unk8;

    if (type == PartTypeMapPiece || type == PartTypeAsset) {
        Assert(unkOffset9 > 0);
        FSeek(start + unkOffset9);
        PartUnk9 unk9;
    } else {
        Assert(unkOffset9 == 0);
    }

    Assert(unkOffset10 > 0);
    FSeek(start + unkOffset10);
    PartUnk10 unk10;

    if (type == PartTypeMapPiece || type == PartTypeCollision
        || type == PartTypeConnectCollision || type == PartTypeAsset) {
        Assert(unkOffset11 > 0);
        FSeek(start + unkOffset11);
        PartUnk11 unk11;
    } else {
        Assert(unkOffset11 == 0);
    }
} Part <read=ReadPart>;

wstring ReadPart(Part& part) {
    string str;
    SPrintf(str, "%2i ", part.type);
    return str + part.name;
}


//------------------------------------------------

// Ridiculously speculative
typedef struct {
    uint collisionMask[48];
    byte condition1; Assert(IsBool(condition1));
    byte condition2; Assert(IsBool(condition2));
    byte unkC2;
    byte unkC3;
    short unkC4; Assert(unkC4 == -1);
    short unkC6; Assert(IsBool(unkC6));
    
    local int i <hidden=true>;
    for (i = 0; i < 48; i++) {
        int zero <hidden=true>; Assert(zero == 0);
    }
} PartUnk1;


typedef struct {
    int condition;
    int dispGroups[8];
    short unk24;
    short unk26;
    int unk28 <hidden=true>; Assert(unk28 == 0);
    int unk2C <hidden=true>; Assert(unk2C == 0);
    int unk30 <hidden=true>; Assert(unk30 == 0);
    int unk34 <hidden=true>; Assert(unk34 == 0);
    int unk38 <hidden=true>; Assert(unk38 == 0);
    int unk3C <hidden=true>; Assert(unk3C == 0);
    int unk40 <hidden=true>; Assert(unk40 == 0);
    int unk44 <hidden=true>; Assert(unk44 == 0);
} PartUnk2;


// The entity IDs are in the same place at least,
// everything else is extremely unconfirmed.
typedef struct {
    int entityID;
    byte unk04; Assert(IsBool(unk04));
    byte unk05; Assert(unk05 == 0);
    byte unk06; Assert(unk06 == 0);
    byte lanternID; Assert(lanternID == 0);
    byte lodParamID;
    byte unk09;
    byte isPointLightShadowSrc; Assert(isPointLightShadowSrc == 0 || isPointLightShadowSrc == -1);
    byte unk0B; Assert(unk0B == 0 || unk0B == -1);
    byte isShadowSrc; Assert(IsBool(isShadowSrc));
    byte isStaticShadowSrc; Assert(IsBool(isStaticShadowSrc));
    byte isCascade3ShadowSrc; Assert(IsBool(isCascade3ShadowSrc));
    byte unk0F; Assert(IsBool(unk0F));
    byte unk10; Assert(IsBool(unk10));
    byte isShadowDest; Assert(IsBool(isShadowDest));
    byte isShadowOnly; Assert(isShadowOnly == 0);
    byte drawByReflectCam; Assert(drawByReflectCam == 0);
    byte drawOnlyReflectCam; Assert(IsBool(drawOnlyReflectCam));
    byte enableOnAboveShadow; Assert(IsBool(enableOnAboveShadow));
    byte disablePointLightEffect; Assert(IsBool(disablePointLightEffect));
    byte unk17; Assert(IsBool(unk17));
    byte unk18;
    byte unk19;
    byte unk1A;
    byte unk1B;
    int entityGroupIDs[8];
    short unk3C;
    short unk3E; Assert(IsBool(unk3E));
} PartEntity;


// Is this even still the same thing?
typedef struct {
    int lightSetID;
    int fogParamID;
    int lightScatteringID; Assert(lightScatteringID == 0);
    int envMapID; Assert(envMapID == 0);
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
} PartGparam;


// This REALLY doesn't seem like the same thing
typedef struct {
    int unk00 <hidden=true>; Assert(unk00 == 0);
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
    float unk10;
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18;
    int unk1C;
    int unk20;
    int unk24 <hidden=true>; Assert(unk24 == 0);
    int unk28 <hidden=true>; Assert(unk28 == 0);
    int unk2C <hidden=true>; Assert(unk2C == 0);
    int unk30 <hidden=true>; Assert(unk30 == 0);
    int unk34 <hidden=true>; Assert(unk34 == 0);
    int unk38 <hidden=true>; Assert(unk38 == 0);
    int unk3C <hidden=true>; Assert(unk3C == 0);
    int unk40 <hidden=true>; Assert(unk40 == 0);
    int unk44 <hidden=true>; Assert(unk44 == 0);
    int unk48 <hidden=true>; Assert(unk48 == 0);
    int unk4C <hidden=true>; Assert(unk4C == 0);
} PartSceneGparam;


typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C <hidden=true>; Assert(unk1C == 0);
} PartUnk7;


typedef struct {
    int unk00; Assert(IsBool(unk00));
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
} PartUnk8;


typedef struct {
    int unk00;
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
} PartUnk9;


typedef struct {
    int mapID;
    int unk04;
    int unk08; Assert(unk08 == 0);
    int unk0C;
    int unk10; Assert(IsBool(unk10));
    int unk14;
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
} PartUnk10;


typedef struct {
    int unk00;
    int unk04;
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
} PartUnk11;

//------------------------------------------------

typedef struct {
    int unk00 <hidden=true>; Assert(unk00 == 0);
    int unk04 <hidden=true>; Assert(unk04 == 0);
} PartMapPiece;


typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04; Assert(unk04 == 0);
    int thinkParamID;
    int npcParamID;
    int talkID;
    byte unk14; Assert(unk14 == 0);
    byte unk15; Assert(IsBool(unk15));
    short platoonID;
    int charaInitID;
    int collisionPartIndex;
    short unk20;
    short unk22; Assert(unk22 == 0);
    int unk24; Assert(unk24 == -1);
    int unk28; // Shorts?
    int unk2C;
    int unk30; Assert(unk30 == 0);
    int unk34;
    int backupEventAnimID;
    int unk3C;
    int unk40;
    int unk44;
    int unk48;
    int unk4C;
    int unk50; Assert(unk50 == 0);
    int unk54; Assert(unk54 == 0);
    int unk58; Assert(unk58 == 0);
    int unk5C; Assert(unk5C == 0);
    int unk60; Assert(unk60 == 0);
    int unk64; Assert(unk64 == 0);
    int unk68; Assert(unk68 == 0);
    int unk6C; Assert(unk6C == 0);
    int unk70; Assert(unk70 == 0);
    int unk74; Assert(unk74 == 0);
    quad unk78; Assert(unk78 == 0x80); // Offset, presumably
    int unk80; Assert(unk80 == 0);
    float unk84;
    struct {
        int unk00; Assert(unk00 == -1);
        short unk04; Assert(unk04 == -1);
        short unk06; Assert(unk06 == 10);
    } unk88s[5] <optimize=false>;
    int unkB0 <hidden=true>; Assert(unkB0 == 0);
    int unkB4 <hidden=true>; Assert(unkB4 == 0);
    int unkB8 <hidden=true>; Assert(unkB8 == 0);
    int unkBC <hidden=true>; Assert(unkBC == 0);
} PartEnemy;


typedef struct {
    int unk00;
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
} PartPlayer;


typedef struct {
    byte unk00;
    byte unk01;
    byte unk02;
    byte unk03; Assert(IsBool(unk03));
    float unk04;
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
    int unk10; Assert(unk10 == 0);
    float unk14;
    int unk18;
    int unk1C;
    int playRegionID;
    short unk24;
    short unk26; Assert(IsBool(unk26));
    int unk28; Assert(unk28 == 0);
    int unk2C; Assert(unk2C == -1);
    int unk30;
    byte unk34;
    byte unk35;
    byte unk36; Assert(IsBool(unk36));
    byte unk37; Assert(unk37 == 0);
    int unk38; Assert(unk38 == -1);
    short unk3C;
    short unk3E; // Index?
    float unk40; // reflectPlaneHeight?
    int unk44; Assert(unk44 == 0);
    int unk48;
    short unk4C; Assert(IsBool(unk4C));
    short unk4E;
} PartCollision;


typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == -1);
    int unk0C; Assert(unk0C == 0);
    int unk10; Assert(unk10 == -1);
    int unk14; Assert(unk14 == -1);
    int unk18; Assert(unk18 == -1);
    int unk1C; Assert(unk1C == -1);
} PartDummyAsset;


typedef struct {
    short unk00; Assert(unk00 == 0);
    short unk02; Assert(IsBool(unk02));
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
    byte unk10;
    byte unk11; Assert(IsBool(unk11));
    byte unk12;
    byte unk13; Assert(unk13 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    short unk1C;
    short unk1E;
    int unk20; Assert(unk20 == -1);
    int unk24;
    int unk28;
    int unk2C; Assert(unk2C == 0);
    int unk30;
    int unk34;
    int unk38;
    int unk3C;
    int unk40;
    int unk44;
    int unk48;
    int unk4C;
    byte unk50; Assert(IsBool(unk50));
    byte unk51;
    byte unk52; Assert(unk52 == 0);
    byte unk53;
    int unk54;
    int unk58;
    int unk5C;
    int unk60;
    int unk64;
    quad offset68 <format=hex>; Assert(offset68 == 0x88);
    quad offset70 <format=hex>; Assert(offset70 == 0xC8);
    quad offset78 <format=hex>; Assert(offset78 == 0x108);
    quad offset80 <format=hex>; Assert(offset80 == 0x148);
    
    struct {
        short unk00;
        short unk02; Assert(unk02 == -1);
        short unk04;
        short unk06; Assert(unk06 == -1);
        int unk08; Assert(unk08 == 0);
        int unk0C; Assert(unk0C == 0);
        int unk10; Assert(unk10 == -1);
        int unk14; Assert(unk14 == -1);
        int unk18; Assert(unk18 == -1);
        int unk1C;
        int unk20; Assert(unk20 == 0);
        short unk24;
        short unk26; Assert(unk26 == -1);
        int unk28;
        int unk2C;
        int unk30; Assert(unk30 == 0);
        int unk34; Assert(unk34 == 0);
        int unk38; Assert(unk38 == 0);
        int unk3C; Assert(unk3C == 0);
    } unk88;
    
    struct {
        int unk00; Assert(IsBool(unk00));
        int unk04;
        int unk08; Assert(unk08 == -1);
        int unk0C; Assert(unk0C == 0);
        int unk10; Assert(unk10 == 0);
        float unk14;
        int unk18; Assert(unk18 == 0);
        byte unk1C;
        byte unk1D;
        byte unk1E;
        byte unk1F;
        int unk20; Assert(unk20 == 0);
        int unk24; Assert(unk24 == 0);
        int unk28; Assert(unk28 == 0);
        int unk2C; Assert(unk2C == 0);
        int unk30; Assert(unk30 == 0);
        int unk34; Assert(unk34 == 0);
        int unk38; Assert(unk38 == 0);
        int unk3C; Assert(unk3C == 0);
    } unkC8;
    
    struct {
        int unk00; Assert(IsBool(unk00));
        float unk04;
        byte unk08; Assert(unk08 == -1);
        byte unk09;
        byte unk0A;
        byte unk0B;
        short unk0C;
        short unk0E;
        float unk10; Assert(unk10 == -1.0);
        int unk14;
        int unk18;
        int unk1C;
        int unk20;
        byte unk24;
        byte unk25; Assert(IsBool(unk25));
        byte unk26; Assert(unk26 == 0);
        byte unk27; Assert(unk27 == 0);
        int unk28; Assert(unk28 == 0);
        int unk2C; Assert(unk2C == 0);
        int unk30; Assert(unk30 == 0);
        int unk34; Assert(unk34 == 0);
        int unk38; Assert(unk38 == 0);
        int unk3C; Assert(unk3C == 0);
    } unk108;
    
    struct {
        byte unk00; Assert(IsBool(unk00));
        byte unk01;
        byte unk02;
        byte unk03; Assert(IsBool(unk03));
        int unk04; Assert(unk04 == 0);
        int unk08; Assert(unk08 == 0);
        int unk0C; Assert(unk0C == 0);
        int unk10; Assert(unk10 == 0);
        int unk14; Assert(unk14 == 0);
        int unk18; Assert(unk18 == 0);
        int unk1C; Assert(unk1C == 0);
        int unk20; Assert(unk20 == 0);
        int unk24; Assert(unk24 == 0);
        int unk28; Assert(unk28 == 0);
        int unk2C; Assert(unk2C == 0);
        int unk30; Assert(unk30 == 0);
        int unk34; Assert(unk34 == 0);
        int unk38; Assert(unk38 == 0);
        int unk3C; Assert(unk3C == 0);
    } unk148;
} PartAsset;


typedef struct {
    int collisionIndex;
    byte mapID[4];
    byte unk08;
    byte unk09; Assert(IsBool(unk09));
    byte unk0A;
    byte unk0B; Assert(IsBool(unk0B));
    int unk0C <hidden=true>; Assert(unk0C == 0);
} PartConnectCollision;
