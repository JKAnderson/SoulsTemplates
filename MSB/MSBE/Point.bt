//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MSBE\Point.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Elden Ring MSB regions
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <int> PointType {
    PointTypeInvasionPoint = 1,
    PointTypeEnvironmentMapPoint = 2,
    PointTypeSound = 4,
    PointTypeSFX = 5,
    PointTypeWindSFX = 6,
    PointTypeSpawnPoint = 8,
    PointTypeMessage = 9,
    PointTypeEnvironmentMapEffectBox = 17,
    PointTypeWindArea = 18,
    PointTypeConnection = 21,
    PointTypePatrolRoute22 = 22,
    PointTypeBuddySummonPoint = 26,
    PointTypeMufflingBox = 28,
    PointTypeMufflingPortal = 29,
    PointTypeSoundRegion = 30,
    PointTypeMufflingPlane = 31,
    PointTypePatrolRoute = 32,
    PointTypeMapPoint = 33,
    PointTypeWeatherOverride = 35,
    PointTypeAutoDrawGroupPoint = 36,
    PointTypeGroupDefeatReward = 37,
    PointTypeMapPointDiscoveryOverride = 38,
    PointTypeMapPointParticipationOverride = 39,
    PointTypeHitset = 40,
    PointTypeNPCArea = 41,
    PointTypeWeatherCreateAssetPoint = 42,
    PointTypePlayArea = 43,
    PointTypeEnvironmentMapOutput = 44,
    PointTypeMountJump = 46,
    PointTypeDummy = 48,
    PointTypeFallPreventionRemoval = 49,
    PointTypeNavmeshCutting = 50,
    PointTypeMapNameOverride = 51,
    PointTypeMountJumpFall = 52,
    PointTypeHorseProhibition = 53,
    PointTypeOther = -1,
};

struct PointUnk4;

struct PointInvasionPoint;
struct PointEnvironmentMapPoint;
struct PointSound;
struct PointSFX;
struct PointWindSFX;
struct PointSpawnPoint;
struct PointMessage;
struct PointEnvironmentMapEffectBox;
struct PointConnection;
struct PointPatrolRoute22;
struct PointBuddySummonPoint;
struct PointMufflingBox;
struct PointMufflingPortal;
struct PointSoundRegion;
struct PointPatrolRoute;
struct PointMapPoint;
struct PointWeatherOverride;
struct PointAutoDrawGroupPoint;
struct PointGroupDefeatReward;
struct PointMapPointDiscoveryOverride;
struct PointHitset;
struct PointNPCArea;
struct PointWeatherCreateAssetPoint;
struct PointPlayArea;
struct PointMountJump;
struct PointDummy;
struct PointFallPreventionRemoval;
struct PointNavmeshCutting;
struct PointMapNameOverride;
struct PointMountJumpFall;
struct PointHorseProhibition;

//------------------------------------------------

typedef struct {
    local quad start <hidden=true> = FTell();
    
    quad nameOffset <format=hex>;
    PointType pointType;
    int id;
    ShapeType shapeType;
    Vector3 position;
    Vector3 rotation;
    int unk2C;
    quad shortsAOffset <format=hex>;
    quad shortsBOffset <format=hex>;
    int unk40;
    int mapStudioLayer;
    quad shapeDataOffset <format=hex>;
    quad entityDataOffset <format=hex>;
    quad typeDataOffset <format=hex>;
    quad unkOffset4 <format=hex>;
    
    Assert(nameOffset > 0);
    FSeek(start + nameOffset);
    wstring name;

    Assert(shortsAOffset > 0);
    FSeek(start + shortsAOffset);
    short shortCountA;
    if (shortCountA > 0) {
        short shortsA[shortCountA];
    }
    // Pad to 4
    
    Assert(shortsBOffset > 0);
    FSeek(start + shortsBOffset);
    short shortCountB;
    if (shortCountB > 0) {
        short shortsB[shortCountB];
    }
    // Pad to 8
    
    Assert(entityDataOffset > 0);
    FSeek(start + entityDataOffset);
    int activationPartIndex;
    int entityID;
    byte unkE08;
    byte unkE09 <hidden=true>; Assert(unkE09 == 0);
    byte unkE0A <hidden=true>; Assert(unkE0A == 0);
    byte unkE0B <hidden=true>; Assert(unkE0B == 0);
    int unkE0C <hidden=true>; Assert(unkE0C == 0);
    // Pad to 8
    
    if (shapeType == ShapeTypePoint) {
        Assert(shapeDataOffset == 0);
    } else {
        Assert(shapeDataOffset > 0);
        FSeek(start + shapeDataOffset);
        switch (shapeType) {
            case ShapeTypeCircle: ShapeCircle circle; break;
            case ShapeTypeSphere: ShapeSphere sphere; break;
            case ShapeTypeCylinder: ShapeCylinder cylinder; break;
            case ShapeTypeRect: ShapeRect rect; break;
            case ShapeTypeBox: ShapeBox box; break;
            case ShapeTypeComposite: ShapeComposite composite; break;
            
            default: Assert(false);
        }
    }
    
    if (pointType == PointTypeWindArea
        || pointType == PointTypeMufflingPlane
        || pointType == PointTypeMapPointDiscoveryOverride
        || pointType == PointTypeMapPointParticipationOverride
        || pointType == PointTypeEnvironmentMapOutput
        || pointType == PointTypeOther) {
        Assert(typeDataOffset == 0);
    } else {
        Assert(typeDataOffset > 0);
        FSeek(start + typeDataOffset);
        switch (pointType) {
            case PointTypeInvasionPoint: PointInvasionPoint invasionPoint; break;
            case PointTypeEnvironmentMapPoint: PointEnvironmentMapPoint environmentMapPoint; break;
            case PointTypeSound: PointSound sound; break;
            case PointTypeSFX: PointSFX sfx; break;
            case PointTypeWindSFX: PointWindSFX windSfx; break;
            case PointTypeSpawnPoint: PointSpawnPoint spawnPoint; break;
            case PointTypeMessage: PointMessage message; break;
            case PointTypeEnvironmentMapEffectBox: PointEnvironmentMapEffectBox environmentMapEffectBox; break;
            case PointTypeConnection: PointConnection connection; break;
            case PointTypePatrolRoute22: PointPatrolRoute22 patrolRoute22; break;
            case PointTypeBuddySummonPoint: PointBuddySummonPoint buddysummonPoint; break;
            case PointTypeMufflingBox: PointMufflingBox mufflingBox; break;
            case PointTypeMufflingPortal: PointMufflingPortal mufflingPortal; break;
            case PointTypeSoundRegion: PointSoundRegion soundRegion; break;
            case PointTypePatrolRoute: PointPatrolRoute patrolRoute; break;
            case PointTypeMapPoint: PointMapPoint mapPoint; break;
            case PointTypeWeatherOverride: PointWeatherOverride weatherOverride; break;
            case PointTypeAutoDrawGroupPoint: PointAutoDrawGroupPoint autoDrawGroupPoint; break;
            case PointTypeGroupDefeatReward: PointGroupDefeatReward groupDefeatReward; break;
            case PointTypeMapPointDiscoveryOverride: PointMapPointDiscoveryOverride mapPointDiscoveryOverride; break;
            case PointTypeHitset: PointHitset hitset; break;
            case PointTypeNPCArea: PointNPCArea npcArea; break;
            case PointTypeWeatherCreateAssetPoint: PointWeatherCreateAssetPoint weatherCreateAssetPoint; break;
            case PointTypePlayArea: PointPlayArea playArea; break;
            case PointTypeMountJump: PointMountJump mountJump; break;
            case PointTypeDummy: PointDummy dummy; break;
            case PointTypeFallPreventionRemoval: PointFallPreventionRemoval fallPreventionRemoval; break;
            case PointTypeNavmeshCutting: PointNavmeshCutting navmeshCutting; break;
            case PointTypeMapNameOverride: PointMapNameOverride mapNameOverride; break;
            case PointTypeMountJumpFall: PointMountJumpFall mountJumpFall; break;
            case PointTypeHorseProhibition: PointHorseProhibition horseProhibition; break;

            default: Assert(false);
        }
    }
    
    Assert(unkOffset4 > 0);
    FSeek(start + unkOffset4);
    PointUnk4 unk4;
} Point <read=ReadPoint>;

wstring ReadPoint(Point& point) {
    string str;
    SPrintf(str, "%2i %i ", point.pointType, point.shapeType);
    return str + point.name;
}

//------------------------------------------------

// This is probably the same as the one in Event
typedef struct {
    int mapID <format=hex>; // The usual 4 bytes as an actual LE int; -1 for none
    int unk04;
    int unk08; Assert(unk08 == 0);
    int unk0C;
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
} PointUnk4;

//------------------------------------------------

typedef struct {
    int priority;
} PointInvasionPoint;


typedef struct {
    float unk00;
    int unk04;
    int unk08; Assert(unk08 == -1);
    byte unk0C; Assert(unk0C == 0);
    byte unk0D; Assert(IsBool(unk0D));
    byte unk0E; Assert(IsBool(unk0E));
    byte unk0F; Assert(IsBool(unk0F));
    float unk10;
    float unk14;
    // Usually 00 00 00 02 which doesn't really make sense,
    // but it's definitely a map ID sometimes
    byte mapID[4];
    int unk1C; Assert(unk1C == 0);
    int unk20;
    int unk24;
    int unk28;
    byte unk2C;
    byte unk2D;
    byte unk2E; Assert(unk2E == 0);
    byte unk2F; Assert(unk2F == 0);
} PointEnvironmentMapPoint;


typedef struct {
    int soundType;
    int soundID;
    int childPointIndices[16];
    byte unk48; Assert(unk48 == 0);
    byte unk49; Assert(IsBool(unk49));
    byte unk4A; Assert(unk4A == 0);
    byte unk4B; Assert(unk4B == 0);
} PointSound;


typedef struct {
    int effectID;
    int unk04;
} PointSFX;


typedef struct {
    int effectID;
    int windAreaIndex;
    float unk08;
} PointWindSFX;


typedef struct {
    int unk00; Assert(unk00 == -1);
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
} PointSpawnPoint;


typedef struct {
    short messageID;
    short unk02;
    int hidden; Assert(IsBool(hidden));
    int unk08;
    int unk0C;
    int unk10;
    int unk14;
    int unk18;
    int unk1C;
    int unk20;
} PointMessage;


typedef struct {
    float unk00;
    float compare;
    byte unk08;
    byte unk09;
    short unk0A;
    int unk0C <hidden=true>; Assert(unk0C == 0);
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
    int unk20 <hidden=true>; Assert(unk20 == 0);
    float unk24;
    float unk28;
    short unk2C; Assert(IsBool(unk2C));
    byte unk2E; Assert(IsBool(unk2E));
    byte unk2F; Assert(IsBool(unk2F));
    short unk30;
    byte unk32; Assert(unk32 == 0);
    byte unk33; Assert(IsBool(unk33));
    short unk34;
    short unk36; Assert(IsBool(unk36));
    int unk38; Assert(unk38 == 0);
} PointEnvironmentMapEffectBox;


typedef struct {
    ubyte mapID[4];
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
} PointConnection;


typedef struct {
    int unk00; Assert(unk00 == -1);
    int unk04; Assert(unk04 == 0);
} PointPatrolRoute22;


typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
    int unk10;
} PointBuddySummonPoint;


typedef struct {
    int unk00;
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 32); // Offset?
    int unk1C; Assert(unk1C == 0);
    int unk20; Assert(unk20 == 0);
    float unk24;
    int unk28; Assert(unk28 == 0);
    int unk2C; Assert(unk2C == 0);
    int unk30; Assert(unk30 == 0);
    float unk34;
    int unk38; Assert(unk38 == 0);
    float unk3C;
    float unk40;
    float unk44;
} PointMufflingBox;


typedef struct {
    int unk00;
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 32);
    int unk1C; Assert(unk1C == 0);
    int unk20; Assert(unk20 == 0);
    int unk24; Assert(unk24 == 0);
    int unk28; Assert(unk28 == 0);
    int unk2C; Assert(unk2C == 0);
    int unk30; Assert(unk30 == 0);
    int unk34; Assert(unk34 == -1);
} PointMufflingPortal;


typedef struct {
    byte unk00;
    byte unk01;
    byte unk02;
    byte unk03;
    int unk04;
    short unk08;
    short unk0A;
    byte unk0C;
    byte unk0D; Assert(unk0D == 0);
    byte unk0E; Assert(unk0E == 0);
    byte unk0F; Assert(unk0F == 0);
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
} PointSoundRegion;


typedef struct {
    int unk00;
} PointPatrolRoute;


typedef struct {
    int unk00;
    int unk04;
    float unk08;
    float unk0C;
    int unk10; Assert(unk10 == -1);
    float unk14;
    float unk18;
    int unk1C; Assert(unk1C == 0);
} PointMapPoint;


typedef struct {
    int unk00;
    int unk04; Assert(unk04 == -1);
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
} PointWeatherOverride;


typedef struct {
    int unk00;
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
    int unk10 <hidden=true>; Assert(unk10 == 0);
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
} PointAutoDrawGroupPoint;


typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C; Assert(unk0C == -1);
    int unk10; Assert(unk10 == -1);
    int unk14[8]; // Part indices?
    int unk34;
    int unk38;
    int unk3C; Assert(unk3C == -1);
    int unk40; Assert(unk40 == -1);
    int unk44; Assert(unk44 == -1);
    int unk48; Assert(unk48 == -1);
    int unk4C; Assert(unk4C == -1);
    int unk50; Assert(unk50 == -1);
    int unk54;
    int unk58; Assert(unk58 == 0);
    int unk5C; Assert(unk5C == 0);
} PointGroupDefeatReward;


typedef struct {
    int mark <bgcolor=cBlack, fgcolor=cWhite>;
    Assert(false);
} PointMapPointDiscoveryOverride;


typedef struct {
    int unk00;
} PointHitset;


typedef struct {
    int unk00;
    int unk04; Assert(unk04 == 0);
} PointNPCArea;


typedef struct {
    int unk00; Assert(unk00 == 0);
} PointWeatherCreateAssetPoint;


typedef struct {
    int unk00;
    int unk04;
} PointPlayArea;


typedef struct {
    float unk00;
    int unk04;
} PointMountJump;


typedef struct {
    int unk00;
    int unk04; Assert(unk04 == 0);
} PointDummy;

typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04; Assert(unk04 == 0);
} PointFallPreventionRemoval;


typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04; Assert(unk04 == 0);
} PointNavmeshCutting;


typedef struct {
    int unk00;
    int unk04; Assert(unk04 == 0);
} PointMapNameOverride;


typedef struct {
    int unk00; Assert(unk00 == -1);
    int unk04; Assert(unk04 == 0);
} PointMountJumpFall;


typedef struct {
    int unk00;
    int unk04; Assert(unk04 == 0);
} PointHorseProhibition;
