//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: MSB3\Point.bt
//   Authors: TKGP
//   Version: 
//   Purpose: DS3 MSB regions
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <int> PointType {
    PointTypeInvasionPoint = 1,
    PointTypeEnvironmentMapPoint = 2,
    //PointTypeRegion3 = 3,
    PointTypeSound = 4,
    PointTypeSFX = 5,
    PointTypeWindSFX = 6,
    //PointTypeRegion7 = 7,
    PointTypeSpawnPoint = 8,
    PointTypeMessage = 9,
    //PointTypePseudoMultiplayer = 10,
    PointTypePatrolRoute = 11,
    PointTypeMovementPoint = 12,
    PointTypeWarpPoint = 13,
    PointTypeActivationArea = 14,
    PointTypeEvent = 15,
    PointTypeLogic = 0,
    PointTypeEnvironmentMapEffectBox = 17,
    PointTypeWindArea = 18,
    //PointTypeRegion19 = 19,
    PointTypeMufflingBox = 20,
    PointTypeMufflingPortal = 21,
    PointTypeOther = -1,
};

struct PointInvasionPoint;
struct PointEnvironmentMapPoint;
struct PointSound;
struct PointSFX;
struct PointWindSFX;
struct PointSpawnPoint;
struct PointMessage;
struct PointEnvironmentMapEffectBox;
struct PointMufflingBox;
struct PointMufflingPortal;

//------------------------------------------------

typedef struct {
    local quad start <hidden=true> = FTell();
    
    quad nameOffset <format=hex>;
    PointType pointType;
    int id;
    ShapeType shapeType;
    Vector3 position;
    Vector3 rotation;
    int unk2C;
    quad shortsAOffset <format=hex>;
    quad shortsBOffset <format=hex>;
    int unk40; Assert(unk40 == -1);
    int mapStudioLayer;
    quad shapeDataOffset <format=hex>;
    quad entityDataOffset <format=hex>;
    quad typeDataOffset <format=hex>;
    
    Assert(nameOffset > 0);
    FSeek(start + nameOffset);
    wstring name;
    
    Assert(shortsAOffset > 0);
    FSeek(start + shortsAOffset);
    short shortCountA;
    if (shortCountA > 0) {
        short shortsA[shortCountA];
    }
    // Pad to 4
    
    Assert(shortsBOffset > 0);
    FSeek(start + shortsBOffset);
    short shortCountB;
    if (shortCountB > 0) {
        short shortsB[shortCountB];
    }
    // Pad to 8
    
    if (shapeType == ShapeTypePoint) {
        Assert(shapeDataOffset == 0);
    } else {
        Assert(shapeDataOffset > 0);
        FSeek(start + shapeDataOffset);
        switch (shapeType) {
            case ShapeTypeCircle: ShapeCircle circle; break;
            case ShapeTypeSphere: ShapeSphere sphere; break;
            case ShapeTypeCylinder: ShapeCylinder cylinder; break;
            case ShapeTypeRect: ShapeRect rect; break;
            case ShapeTypeBox: ShapeBox box; break;
            default: Assert(false);
        }
    }
    
    FSeek(start + entityDataOffset);
    int activationPartIndex;
    int entityID;
    // Pad to 8
    
    if (pointType == PointTypePatrolRoute || pointType == PointTypeMovementPoint
        || pointType == PointTypeWarpPoint || pointType == PointTypeActivationArea
        || pointType == PointTypeEvent || pointType == PointTypeLogic
        || pointType == PointTypeWindArea || pointType == PointTypeMufflingBox
        || pointType == PointTypeMufflingPortal || pointType == PointTypeOther) {
        Assert(typeDataOffset == 0);
    } else if (pointType != PointTypeEnvironmentMapPoint) {
        Assert(typeDataOffset > 0);
    }
    
    if (typeDataOffset != 0
        || pointType == PointTypeMufflingBox || pointType == PointTypeMufflingPortal) {
        switch (pointType) {
            case PointTypeInvasionPoint: PointInvasionPoint invasionPoint; break;
            case PointTypeEnvironmentMapPoint: PointEnvironmentMapPoint environmentMapPoint; break;
            case PointTypeSound: PointSound sound; break;
            case PointTypeSFX: PointSFX sfx; break;
            case PointTypeWindSFX: PointWindSFX windSFX; break;
            case PointTypeSpawnPoint: PointSpawnPoint spawnPoint; break;
            case PointTypeMessage: PointMessage message; break;
            case PointTypeEnvironmentMapEffectBox: PointEnvironmentMapEffectBox environmentMapEffectBox; break;
            case PointTypeMufflingBox: PointMufflingBox mufflingBox; break;
            case PointTypeMufflingPortal: PointMufflingPortal mufflingPortal; break;
            default: Assert(false);
        }
    }
} Point <read=ReadPoint>;

wstring ReadPoint(Point& point) {
    string str;
    SPrintf(str, "%2i %2i ", point.pointType, point.shapeType);
    return str + point.name;
}


typedef struct {
    int priority;
} PointInvasionPoint;


typedef struct {
    int unk00; // Flags?
    int unk04 <hidden=true>; Assert(unk04 == 0);
} PointEnvironmentMapPoint;


typedef struct {
    int soundType;
    int soundID;
    int childPointIndices[16];
} PointSound;


typedef struct {
    int effectID;
    int unk04; if (unk04 != -1) Printf("%i\n", unk04);
    int unk08; Assert(unk08 == -1);
    int unk0C; Assert(unk0C == -1);
    int unk10; Assert(unk10 == -1);
    int startDisabled;
} PointSFX;


typedef struct {
    int effectID;
    int unk04; Assert(unk04 == -1);
    int unk08; Assert(unk08 == -1);
    int unk0C; Assert(unk0C == -1);
    int unk10; Assert(unk10 == -1);
    int windAreaIndex;
    float unk18;
} PointWindSFX;


typedef struct {
    int unk00;
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
} PointSpawnPoint;


typedef struct {
    short messageID;
    short unk02;
    int hidden;
} PointMessage;


typedef struct {
    float unk00;
    float compare;
    byte unk08;
    byte unk09;
    short unk0A;
    float unk0C <hidden=true>; Assert(unk0C == 0); // Pav says these are floats
    float unk10 <hidden=true>; Assert(unk10 == 0);
    float unk14 <hidden=true>; Assert(unk14 == 0);
    float unk18 <hidden=true>; Assert(unk18 == 0);
    float unk1C <hidden=true>; Assert(unk1C == 0);
    float unk20 <hidden=true>; Assert(unk20 == 0);
    int unk24 <hidden=true>; Assert(unk24 == 0);
    int unk28 <hidden=true>; Assert(unk28 == 0);
} PointEnvironmentMapEffectBox;


typedef struct {
    int unk00;
} PointMufflingBox;


typedef struct {
    int unk00;
    int unk04 <hidden=true>; Assert(unk04 == 0);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
} PointMufflingPortal;
