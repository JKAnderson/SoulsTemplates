//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: NVA.bt
//   Authors: katalash, TKGP, horkrux
//   Version: 
//   Purpose: BB/DS3/SDT navmesh configuration
//  Category: Dantelion
// File Mask: *.nva
//  ID Bytes: 4E 56 4D 41
//   History: 
//------------------------------------------------

#include "Util.bt"

LittleEndian();

typedef struct {
    char magic[4]; Assert(magic == "NVMA");
    int version; //Assert(version == 4 || version == 5);
    int fileSize <format=hex>;
    int sectionCount; Assert(sectionCount == 8 || sectionCount == 9 || sectionCount == 14);
} Header <read=ReadHeader>;

string ReadHeader(Header& header) {
    string str;
    SPrintf(str, "%s %X", header.magic, header.fileSize);
    return str;
}


typedef struct (int assertIndex) {
    int index; Assert(index == assertIndex);
    int version;
    int sectionSize <format=hex>;
    int entryCount;
    local quad start <format=hex> = FTell();
} SectionHeader <read=ReadSectionHeader>;

string ReadSectionHeader(SectionHeader& header) {
    string str;
    SPrintf(str, "%i[%5i] %i %5X",
        header.index, header.entryCount, header.version, header.sectionSize);
    return str;
}


typedef struct (SectionHeader& header) {
    Vector4 position; // Usually 0,0,0
    Vector4 rotation;
    Vector4 scaling;
    //float unk0C; Assert(unk0C == 1);
    //int unk10; // These are not floats
    //int unk14;
    //int unk18;
    //int unk1C; Assert(unk1C == 0);
    //float unk20; Assert(unk20 == 1);
    //float unk24; // The only file where these two aren't 1 is m50_00,
    //float unk28; // where a couple entries have 1.000001 or 1.000002 like lel
    //int unk2C; Assert(unk2C == 0);
    int nvaNameID; // i.e. 350000110 in int form
    int navimeshModelID;
    int faceDataIdx;
    int unk3C; Assert(unk3C == 0);
    int faceCount;
    int connectedNavmeshesCount;
    short gateNodeIndex;
    short subNodesCount;
    int unk4C;
    
    // Each array entry seems to either be a section reference or -1
    if (header.version == 2 || header.version == 3) {
        if (connectedNavmeshesCount > 0) {
            int connectedNavmeshesArray[connectedNavmeshesCount];
        }

        local int i <hidden=true>;
        for (i = 0; i < 16 - connectedNavmeshesCount; i++) {
            int null <fgcolor=cRed, hidden=true>; Assert(null == -1);
        }
    } else {
        int unkOffset <format=hex>;
        int unk54; Assert(unk54 == 0);
        int unk58; Assert(unk54 == 0);
        int unk5C; Assert(unk54 == 0);
        
        if (connectedNavmeshesCount > 0) {
            local quad pos <hidden=true> = FTell();
            FSeek(unkOffset);
            int connectedNavmeshArray[connectedNavmeshesCount];
            FSeek(pos);
        }
    }
} NavmeshInfo <read=ReadEntry0>;

string ReadEntry0(NavmeshInfo& entry) {
    string str;
    SPrintf(str, "");
    return str;
}

typedef struct {
    SectionHeader header(0);
    if (header.entryCount > 0) {
        NavmeshInfo navmeshInfos(header)[header.entryCount] <optimize=false>;
    }
    FSeek(header.start + header.sectionSize);
} NavmeshSection <read=ReadSection0>;

string ReadSection0(NavmeshSection& section) {
    return ReadSectionHeader(section.header);
}


typedef struct {
    int unk00 <fgcolor=cDkYellow>;
    int unk04 <fgcolor=cDkYellow>; Assert(unk04 == 0);
} FaceData <read=ReadEntry1>;

string ReadEntry1(FaceData& entry) {
    string str;
    SPrintf(str, "%i %i", entry.unk00, entry.unk04);
    return str;
}

typedef struct {
    SectionHeader header(1);
    if (header.entryCount > 0) { //one for every face
        FaceData faceData[header.entryCount] <optimize=false>;
    }
    
    if (FTell() % 0x10 != 0) {
        int pad1; Assert(pad1 == -1);
        int pad2; Assert(pad2 == -1);
    }
} FaceDataSection <read=ReadSection1>;
string ReadSection1(FaceDataSection& section) {
    return ReadSectionHeader(section.header);
}


typedef struct {
    int faceIdx; // Smallish ints
    int collisionId; // map section in int form
} NodeBankFace;

typedef struct {
    int bankIdx;
    int faceNum;
    int entityId; // Another map number-y thing, always -1 in DS3, not always in BB
    int unk0C; Assert(unk0C == 0);
    NodeBankFace nodeBankFaces[faceNum];
    
    local int i;
    for (i = 0; i < 64 - faceNum; i++) {
        quad zero <fgcolor=cYellow, hidden=true>; Assert(zero == 0);
    }
} NodeBank <read=ReadEntry2>;

string ReadEntry2(NodeBank& entry) {
    string str;
    SPrintf(str, "");
    return str;
}

typedef struct {
    SectionHeader header(2);
    if (header.entryCount > 0) {
        NodeBank nodeBanks[header.entryCount] <optimize=false>;
    }
} NodeBankSection <read=ReadSection2>; //this is for loading different navmeshes when entering elevators i guess

string ReadSection2(NodeBankSection& section) {
    return ReadSectionHeader(section.header);
}


typedef struct {
    SectionHeader header(3);
    Assert(header.entryCount == 0);
} Section3 <read=ReadSection3>;

string ReadSection3(Section3& section) {
    return ReadSectionHeader(section.header);
}


typedef struct {
    int nvaModelNameMain;
    int nvaModelNameConnectedPiece;
    int navMeshConnectionCount;
    int graphConnectionCount;
    int navMeshConnectionIdx;
    int unk14; Assert(unk14 == 0);
    int graphConnectionIdx;
    int unk1C; Assert(unk1C == 0);
} Connector <read=ReadEntry4>;

string ReadEntry4(Connector& entry) {
    string str;
    SPrintf(str, "%4i %4i", entry.navMeshConnectionCount, entry.graphConnectionCount);
    return str;
}

typedef struct {
    SectionHeader header(4);
    if (header.entryCount > 0) {
        Connector connectors[header.entryCount] <optimize=false>;
    }
} ConnectorSection <read=ReadSection4>;

string ReadSection4(ConnectorSection& section) {
    return ReadSectionHeader(section.header);
}


typedef struct {
    int faceIdx;
    int edgeIdx;
    int oppositeFaceIdx;
    int oppositeEdgeIdx;
} NavMeshConnection <read=ReadEntry5>; //this seems to contain keys, cuz the numbers dont appear to match

string ReadEntry5(NavMeshConnection& entry) {
    string str;
    SPrintf(str, "%4i %4i %4i %4i", entry.faceIdx, entry.edgeIdx, entry.oppositeFaceIdx, entry.oppositeEdgeIdx);
    return str;
}

typedef struct {
    SectionHeader header(5);
    if (header.entryCount > 0) {
        NavMeshConnection navMeshConnections[header.entryCount] <optimize=false>;
    }
} NavMeshConnectionSection <read=ReadSection5>;

string ReadSection5(NavMeshConnectionSection& section) {
    return ReadSectionHeader(section.header);
}


typedef struct {
    int nodeIdx;
    int oppositeNodeIdx;
} GraphConnection <read=ReadEntry6>;

string ReadEntry6(GraphConnection& entry) {
    string str;
    SPrintf(str, "%3i %3i", entry.nodeIdx, entry.oppositeNodeIdx);
    return str;
}

typedef struct {
    SectionHeader header(6);
    if (header.entryCount > 0) {
        GraphConnection graphConnections[header.entryCount] <optimize=false>;
    }
} GraphConnectionSection <read=ReadSection6>;

string ReadSection6(GraphConnectionSection& section) {
    return ReadSectionHeader(section.header);
}


typedef struct {
    Vector4 position;
    int navmeshId;
    int unk14; Assert(unk14 == 0);
    int unk18;
    int unk1C; Assert(unk1C == 0);
} LevelConnector <read=ReadEntry7>;

string ReadEntry7(LevelConnector& entry) {
    string str;
    SPrintf(str, "");
    return str;
}

typedef struct {
    SectionHeader header(7);
    if (header.entryCount > 0) {
        LevelConnector levelConnectors[header.entryCount] <optimize=false>;
    }
} LevelConnectorSection <read=ReadSection7>;

string ReadSection7(LevelConnectorSection& section) {
    return ReadSectionHeader(section.header);
}


typedef struct (SectionHeader& header) {
    Vector3 position;
    short connectedNavmeshIdx;
    short nodeSubId;
    
    if (header.version == 1) {
        short neighbourGateNodeCosts[16];
    } else if (header.version == 2) {
        int neighbourGateNodeCostsCount;
        int unk14; Assert(unk14 == -1);
        int neighbourGateNodeCostsOffset <format=hex>;
        int unk1C; Assert(unk1C == 0);
        
        if (neighbourGateNodeCostsCount > 0) {
            local quad pos <hidden=true> = FTell();
            FSeek(neighbourGateNodeCostsOffset);
            short neighbourGateNodeCosts[neighbourGateNodeCostsCount];
            FSeek(pos);
        }
    }
} GateNode <read=ReadEntry8>;

string ReadEntry8(GateNode& entry) {
    string str;
    SPrintf(str, "%s %3i %2i",
        ReadVector3(entry.position), entry.connectedNavmeshIdx, entry.nodeSubId);
    return str;
}

typedef struct {
    SectionHeader header(8);
    if (header.entryCount > 0) {
        GateNode gateNodes(header)[header.entryCount] <optimize=false>;
    }
} GateNodeSection <read=ReadSection8>;

string ReadSection8(GateNodeSection& section) {
    return ReadSectionHeader(section.header);
}


Header header <bgcolor=cLtRed>;
NavmeshSection navmeshSection <bgcolor=cRed>;
FaceDataSection faceDataSection <bgcolor=cDkYellow>;
NodeBankSection nodeBankSection <bgcolor=cYellow>;
Section3 section3 <bgcolor=cLtGreen>;
ConnectorSection connectorSection <bgcolor=cGreen>;
NavMeshConnectionSection navMeshConnectionSection <bgcolor=cDkGreen>;
GraphConnectionSection graphConnectionSection <bgcolor=cAqua>;
LevelConnectorSection levelConnectorSection <bgcolor=cLtBlue>;
if (header.sectionCount == 9)
GateNodeSection gateNodeSection <bgcolor=cLtPurple>;