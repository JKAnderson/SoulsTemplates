//------------------------------------------------
//--- 010 Editor v10.0.1 Binary Template
//
//      File: SIB\Util.bt
//   Authors: TKGP
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct (byte assert) {
    ubyte value; if (assert != -1) Assert(value == assert);
    if (FTell() % 4 != 0)
        ubyte padding[4 - FTell() % 4];
} Marker <read=ReadMarker>;

string ReadMarker(Marker& marker) {
    string str;
    SPrintf(str, "%2Xh", marker.value);
    return str;
}


typedef struct (int typeAssert, int versionAssert, byte markerAssert) {
    Align(4);
    int zero; Assert(zero == 0);
    int length <format=hex>;
    local int end <format=hex> = FTell() + length;
    int type <format=hex>; if (typeAssert != -1) Assert(type == typeAssert);
    int version; if (versionAssert != -1) Assert(version == versionAssert);
    Marker marker(markerAssert);
} Block <read=ReadBlock, bgcolor=cBlack, fgcolor=cWhite>;

string ReadBlock(Block& block) {
    string str;
    SPrintf(str, "Len %8Xh | Type %8Xh | Ver %i", block.length, block.type, block.version);
    return str;
}


typedef struct {
    Block block(-1, -1, -1);
    FSeek(block.end);
} SkippedBlock <read=ReadSkippedBlock, optimize=false>;

string ReadSkippedBlock(SkippedBlock& block) {
    return ReadBlock(block.block);
}


typedef struct {
    int length;
    if (length > 0)
        char str[length];
    else
        local string str = "";
} PrefixString <read=ReadPrefixString>;

wstring ReadPrefixString(PrefixString& ps) {
    return StringToWString(ps.str, CHARSET_JAPANESE);
}


typedef struct (byte assertMarker) {
    int length;
    if (length > 0)
        char str[length];
    else
        local string str = "";
    Marker marker(assertMarker);
} MarkedString <read=ReadMarkedString>;

wstring ReadMarkedString(MarkedString& ms) {
    return StringToWString(ms.str, CHARSET_JAPANESE);
}
