//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: MQB.bt
//   Authors: TKGP
//   Version: 
//   Purpose: (MovieSequencer Binary) Post-DS1 cutscene definitions
//  Category: Dantelion
// File Mask: *.mqb
//  ID Bytes: 4D 51 42 20
//   History: 
//------------------------------------------------

local int VARINT_LONG = ReadByte(6) == -1;

#include "Util.bt"

if (ReadByte(4))
    BigEndian();
else
    LittleEndian();

//------------------------------------------------

typedef struct {
    char magic[4]; Assert(magic == "MQB ");
    byte bigEndian; Assert(bigEndian == 0 || bigEndian == -1);
    byte unk05; Assert(unk05 == 0);
    byte is64Bit; Assert(is64Bit == 0 || is64Bit == -1); // Speculative since there's no variance within a version
    byte unk07; Assert(unk07 == 0);
    int version;
    int headerSize;
    int resourcePathsOffset <format=hex>;

    Assert(version == 0x91 && headerSize == 0x14 // ACER
        || version == 0x93 && headerSize == 0x14 // ACV, ACVD, GUC, SB
        || version == 0x94 && headerSize == 0x14 // DS2
        || version == 0xCA && headerSize == 0x28 // SotFS
        || version == 0xCB && headerSize == 0x20 // BB
        || version == 0xCC && headerSize == 0x24); // DS3, SDT
    Assert(is64Bit == (version == 0xCA ? -1 : 0));
    
    // The fact that this shrank after SotFS does not inspire confidence
    // that they are the same fields, but who knows.
    if (version == 0xCA) {
        int unk14; Assert(unk14 == 0);
        int unk18; Assert(unk18 == 0);
        int unk1C; Assert(unk1C == 0);
        int unk20; Assert(unk20 == 0);
        int unk24; Assert(unk24 == 0);
    } else if (version == 0xCB || version == 0xCC) {
        int unk14; Assert(unk14 == 1);
        int unk18; Assert(unk18 == 0);
        int unk1C; Assert(unk1C == 0);
        if (version == 0xCC) {
            int unk20; Assert(unk20 == 0);
        }
    }
    Assert(FTell() == headerSize);

    wchar_t name[0x20] <fgcolor=cGreen>;
    float framerate; // Framerate of event playback; always 30 in vanilla
    int resourceCount;
    int cutCount;
    int unkX50 <hidden=true>; Assert(unkX50 == 0);
    int unkX54 <hidden=true>; Assert(unkX54 == 0);
    int unkX58 <hidden=true>; Assert(unkX58 == 0);
    int unkX5C <hidden=true>; Assert(unkX5C == 0);
    int unkX60 <hidden=true>; Assert(unkX60 == 0);
} Header <read=ReadHeader>;

wstring ReadHeader(Header& header) {
    string str;
    SPrintf(str, "%f ", header.framerate);
    return str + header.name;
}


typedef struct (int valueType, int pointType) {
    float value;
    int unk04; Assert(unk04 == 0);
    int unk08;
    int unk0C; Assert(unk0C == 0);
    if (pointType == 2) {
        int unk10;
        int unk14;
        if (valueType == 3) Printf("%8Xh %8Xh\n", unk10, unk14);
    }
} SequencePoint <read=ReadSequencePoint, bgcolor=cPurple, optimize=false>;

string ReadSequencePoint(SequencePoint& sp) {
    string str;
    return SPrintf(str, "%f", sp.value);
}


typedef struct {
    int sequenceSize; Assert(sequenceSize == 0x1C);
    int pointCount;
    int valueType; Assert(valueType == 3 || valueType == 8);
    int pointType; Assert(pointType == 1 || pointType == 2);
    int pointSize; Assert(pointSize == (pointType == 1 ? 0x10 : 0x18));
    int pointsOffset <format=hex>;
    // An offset back to the value in the parent CustomData
    // For colors, each Sequence points to a separate byte of the RGB value
    int parentValueOffset <format=hex>;
    
    local quad pos <hidden=true> = FTell();
    FSeek(pointsOffset);
    SequencePoint points(valueType, pointType)[pointCount];
    FSeek(pos);
} Sequence <optimize=false>;


typedef struct {
    wchar_t name[0x20] <fgcolor=cGreen>;
    enum <int> {
        CD_BOOL = 1,
        CD_SBYTE = 2,
        CD_UBYTE = 3,
        CD_SSHORT = 4,
        
        CD_SINT = 6,
        CD_UINT = 7,
        CD_FLOAT = 8,
        
        CD_STRING = 10,
        CD_BYTES = 11,
    
        CD_COLOR = 13,
    } type;
    Assert(type == CD_BOOL || type == CD_SBYTE || type == CD_UBYTE
        || type == CD_SSHORT || type == CD_SINT || type == CD_UINT
        || type == CD_FLOAT || type == CD_STRING || type == CD_BYTES
        || type == CD_COLOR);

    int unk44; Assert(unk44 == (type == CD_COLOR ? 3 : 0));
    switch (type) {
        case CD_BOOL: byte value; Assert(value == 0 || value == 1); break;
        case CD_SBYTE: byte value; break;
        case CD_UBYTE: ubyte value; break;
        case CD_SSHORT: short value; break;
        case CD_SINT: int value; break;
        case CD_UINT: uint value; break;
        case CD_FLOAT: float value; break;
        case CD_STRING:
        case CD_BYTES:
        case CD_COLOR: int length; break;
        default: Assert(false);
    }
    if (type == CD_BOOL || type == CD_SBYTE || type == CD_UBYTE) {
        byte valuePad[3] <hidden=true>; Assert(!(valuePad[0] | valuePad[1] | valuePad[2]));
    } else if (type == CD_SSHORT) {
        byte valuePad[2] <hidden=true>; Assert(!(valuePad[0] | valuePad[1]));
    }
    int unk4C <hidden=true>; Assert(unk4C == 0);
    int sequencesOffset <format=hex>;
    int sequenceCount;
    int unk58 <hidden=true>; Assert(unk58 == 0);
    int unk5C <hidden=true>; Assert(unk5C == 0);
    
    if (type == CD_STRING) {
        Assert(length > 0 && length % 16 == 0);
        wchar_t value[length / 2] <fgcolor=cLtGreen>;
    } else if (type == CD_BYTES && length > 0) {
        ubyte value[length] <bgcolor=cBlack>;
    } else if (type == CD_COLOR) {
        Assert(length == 4);
        ubyte value[3] <format=hex>;
        byte colorPad <hidden=true>; Assert(colorPad == 0);
    }
    
    if (type == CD_FLOAT)
        Assert(sequenceCount == 0 || sequenceCount == 1);
    else if (type == CD_COLOR)
        Assert(sequenceCount == 0 || sequenceCount == 3);
    else
        Assert(sequenceCount == 0);

    if (sequenceCount > 0) {
        local quad pos <hidden=true> = FTell();
        FSeek(sequencesOffset);
        Sequence sequences[sequenceCount];
        FSeek(pos);
    }
} CustomData <read=ReadCustomData, bgcolor=cLtBlue, optimize=false>;

wstring ReadCustomData(CustomData& customData) {
    string str;
    SPrintf(str, "%2i %i %i %5X[%i] ", customData.type, customData.unk44,
        customData.unk4C, customData.sequencesOffset, customData.sequenceCount);
    string val;
    switch (customData.type) {
        case CD_BOOL: val = customData.value ? "TRUE" : "FALSE"; break;
        case CD_SBYTE:
        case CD_UBYTE:
        case CD_SSHORT:
        case CD_SINT:
        case CD_UINT: SPrintf(val, "%i", customData.value); break;
        case CD_FLOAT: SPrintf(val, "%f", customData.value); break;
        case CD_STRING: val = customData.value; break;
        case CD_BYTES: SPrintf(val, "[%i]", customData.length); break;
        case CD_COLOR: SPrintf(val, "{%02X %02X %02X}",
            customData.value[0], customData.value[1], customData.value[2]); break;
        default: Assert(false);
    }
    return str + customData.name + " = " + val;
}


typedef struct (int i) {
    wchar_t name[0x20] <fgcolor=cGreen>;
    int parentIndex; // Not really sure, but seems right; -1 for none
    int index; Assert(index == i); // ID? Path index? Who cares.
    int type;
    int customDataCount;
    
    if (customDataCount > 0) {
        CustomData customData[customDataCount];
    }
} Resource <read=ReadResource, optimize=false>;

wstring ReadResource(Resource& resource) {
    string str;
    SPrintf(str, "[%i] %3i %3i ",
        resource.customDataCount, resource.parentIndex, resource.type);
    return str + resource.name;
}

typedef struct (int count) {
    local int count <hidden=true> = count;
    local int i <hidden=true>;
    for (i = 0; i < count; i++) {
        Resource resources(i);
    }
} Resources <read=ReadResources>;

wstring ReadResources(Resources& resources) {
    string str;
    SPrintf(str, "[%3i]", resources.count);
    return str;
}
 

typedef struct {
    float frame;
    Vector3 translation;
    Vector3 unk10;
    Vector3 unk1C;
    Vector3 rotation;
    Vector3 unk34;
    Vector3 unk40;
    Vector3 scale;
    Vector3 unk58; // Always 0 as far as I've seen
    Vector3 unk64; // ""
} Transform <read=ReadTransform, bgcolor=cDkAqua, optimize=false>;

wstring ReadTransform(Transform& transform) {
    string str;
    SPrintf(str, "%5.1f %s %s %s", transform.frame,
        ReadVector3(transform.translation), ReadVector3(transform.rotation), ReadVector3(transform.scale));
    return str;
}


typedef struct {
    int id;
    int resourceIndex;
    int groupIndex;
        int startFrame;
        int duration;
        int unk14;
        int unk18;
        int unk1C;
        int unk20; Assert(unk20 == 0 || unk20 == 1);
    int customDataCount;
    int unk28;
    int unk2C; Assert(unk2C == 0);
    
    if (customDataCount > 0) {
        struct { CustomData customData[customDataCount]; } customData;
    }
    
    int flagsX00 <format=hex>;
        // Notes from Pav
        // 0x01 - cam something, uses unkX14
        // 0x20 - 
        // 0x40 - use cam correction, 4 floats at unkfloats 0x38
    int transformCount1;
    int countX08;
    int unkX0C <hidden=true>; Assert(unkX0C == 0);
    int unkX10;
    int transformCount2;
    int unkX18 <hidden=true>; Assert(unkX18 == 0);
    int unkX1C <hidden=true>; Assert(unkX1C == 0);
    
    Assert(flagsX00 == 0x00 || flagsX00 == 0x01 || flagsX00 == 0x04 || flagsX00 == 0x29);
    
    if (flagsX00 & 4) {
        struct {
            int unk00; Assert(unk00 == 3);
            int unk04; Assert(unk04 == 0);
            float unk08;
            float unk0C;
            float unk10;
            int unk14; Assert(unk14 == 0);
            int unk18; Assert(unk18 == 0);
            int unk1C; Assert(unk1C == 0);
            float unk20;
            float unk24;
            float unk28;
        } delete;
    }
    
    // ^ order? v

    if (flagsX00 & 0x20) {
        struct {
            int unk00; Assert(unk00 == 0);
            int unk04; Assert(unk04 == 0);
            int count08; Assert(count08 == 1);
            int unk0C; Assert(unk0C == 0);
            int unk10;
            int unk14; Assert(unk14 == 0);
            float unk18;
            float unk1C;
            float unk20;
            int unk24; Assert(unk24 == 0);
            int unk28; Assert(unk28 == 0);
            int unk2C; Assert(unk2C == 0);
            float unk30;
            float unk34;
            float unk38;
            int fuckCount;
        } help;
    }
    
    struct { Transform transforms1[transformCount1]; } transforms1;
    
    if (countX08 > 0) {
        struct {
            float idk1;
            float idk2;
            float idk3;
            float idk4;
        } idk[countX08] <optimize=false>;
    }

    if (transformCount2 > 0) {
        struct { Transform transforms2[transformCount2]; } transforms2;
    }
    
    if (flagsX00 & 0x20) {
        struct {
            struct Fuck {
                float unk00;
                float unk04;
                float unk08;
                float unk0C;
                float unk10;
                float unk14;
                float unk18;
                float unk1C;
                float unk20;
                float unk24;
            } fuck[help.fuckCount] <optimize=false>;
        } fucks;
    }
    
    // ^ order? v
    
    if (unkX10 > 0) {
        Fuck fucks2[unkX10];
    }
} Disposition <read=ReadDisposition, bgcolor=cLtYellow, optimize=false>;

wstring ReadDisposition(Disposition& dispos) {
    string str;
    SPrintf(str, "[%2i][%i] %4i %3i %3i {%3i %3i %i %3i %3i %i} %2i ",
        dispos.customDataCount, dispos.transformCount1,
        dispos.id, dispos.resourceIndex, dispos.groupIndex,
        dispos.startFrame, dispos.duration, dispos.unk14, dispos.unk18, dispos.unk1C, dispos.unk20,
        dispos.unk28);
    return str + resources.resources[dispos.resourceIndex].name;
}


typedef struct {
    Varint disposOffsetsOffset;
    int disposCount;
    if (header.is64Bit) {
        int pad0C <hidden=true>; Assert(pad0C == 0);
    }
    Varint customDataOffset;
    int customDataCount;
    int unk10; // Parent timeline index?
    
    local quad pos <hidden=true> = FTell();
    if (disposCount > 0) {
        FSeek(disposOffsetsOffset.val);
        Varint disposOffsets[disposCount] <optimize=true>;
    }
    if (customDataCount > 0) {
        FSeek(customDataOffset.val);
        struct { CustomData customData[customDataCount]; } customData;
    }
    FSeek(pos);
} Timeline <read=ReadTimeline, optimize=false>;

wstring ReadTimeline(Timeline& timeline) {
    string str;
    SPrintf(str, "%5X[%i] %5X[%2i] %2i", timeline.disposOffsetsOffset.val, timeline.disposCount,
        timeline.customDataOffset.val, timeline.customDataCount, timeline.unk10);
    return str;
}


typedef struct {
    wchar_t name[0x20] <fgcolor=cGreen>;
    int disposCount;
    int unk44; // Usually 0, not always
    int duration; // Frames
    int unk4C <hidden=true>; Assert(unk4C == 0);
    int timelineCount;
    if (header.is64Bit) {
        int pad54 <hidden=true>; Assert(pad54 == 0);
    }
    Varint timelinesOffset;
    if (!header.is64Bit) {
        int pad58 <hidden=true>; Assert(pad58 == 0);
        int pad5C <hidden=true>; Assert(pad5C == 0);
    }
    
    struct { Disposition dispositions[disposCount]; } dispositions;

    local quad pos <hidden=true> = FTell();
    FSeek(timelinesOffset.val);
    struct { Timeline timelines[timelineCount]; } timelines;
    FSeek(pos);
} Cut <read=ReadCut, optimize=false>;

wstring ReadCut(Cut& cut) {
    string str;
    SPrintf(str, "%i %4i ", cut.unk44, cut.duration);
    return str + cut.name;
}

typedef struct (int count) {
    local int count <hidden=true> = count;
    Cut cuts[count];
} Cuts <read=ReadCuts>;

wstring ReadCuts(Cuts& cuts) {
    string str;
    SPrintf(str, "[%3i]", cuts.count);
    return str;
}


typedef struct {
    Varint offset;

    if (offset.val != 0) {
        local quad pos <hidden=true> = FTell();
        FSeek(offset.val);
        wstring str <bgcolor=cLtGreen>;
        FSeek(pos);
    }
} ResourcePath <read=ReadResourcePath, optimize=false>;

wstring ReadResourcePath(ResourcePath& str) {
    if (str.offset.val == 0)
        return "<null>";
    else
        return str.str;
}

typedef struct (int count) {
    local int count <hidden=true> = count;
    ResourcePath resourcePaths[count];
} ResourcePaths <read=ReadResourcePaths>;

wstring ReadResourcePaths(ResourcePaths& resourcePaths) {
    string str;
    SPrintf(str, "[%3i]", resourcePaths.count);
    return str;
}

//------------------------------------------------

Header header <bgcolor=cLtRed>;
Resources resources(header.resourceCount) <bgcolor=cAqua>;
Cuts cuts(header.cutCount) <bgcolor=cYellow>;

FSeek(header.resourcePathsOffset);
ResourcePaths resourcePaths(header.resourceCount) <bgcolor=cGreen>;
wstring resourceDirectory <bgcolor=cDkGreen>;
