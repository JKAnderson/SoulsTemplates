//------------------------------------------------
//--- 010 Editor v10.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "Util.bt"
LittleEndian();
local int VARINT_LONG = ReadByte(5) == -1;

//------------------------------------------------

typedef struct {
    char magic[4]; Assert(magic == "EDF\0");
    byte unk04 <hidden=true>; Assert(unk04 == 0);
    byte is64Bit; Assert(is64Bit == 0 || is64Bit == -1);
    byte unk06 <hidden=true>; Assert(unk04 == 0);
    byte unk07 <hidden=true>; Assert(unk07 == 0);
    short unk08; Assert(unk08 == 101);
    short unk0A; Assert(unk0A == 204);
    int fileSize <format=hex>;
    Varint mainClassCount;
    Varint mainClassesOffset;
    Varint mainInstrCount;
    Varint mainInstrsOffset;
    Varint mainArgCount;
    Varint mainArgsOffset;
    Varint extraClassCount;
    Varint extraClassesOffset;
    Varint extraInstrCount;
    Varint extraInstrsOffset;
    Varint extraArgCount;
    Varint extraArgsOffset;
    Varint enumCount;
    Varint enumsOffset;
    Varint enumValueCount;
    Varint enumValuesOffset;
    Varint stringsLength;
    Varint stringsOffset;
    Varint unk;
    if (!is64Bit) {
        int pad <hidden=true>; Assert(pad == 0);
    }
} Header <bgcolor=cLtRed>;


typedef struct {
    Varint nameOffset;
    int type;
    if (header.is64Bit) {
        byte unk1;
        byte unk2;
        byte unk3;
        byte unk4;
    }
    int enumOffset <format=hex>;
    if (header.is64Bit) {
        int pad <hidden=true>; Assert(pad == 0);
    }
    Varint defValue;
    Varint minValue;
    Varint maxValue;
    Varint incValue;
    Varint formatOffset;
    if (!header.is64Bit) {
        byte unk1;
        byte unk2;
        byte unk3;
        byte unk4;
    }
    
    local quad pos <hidden=true> = FTell();
    FSeek(header.stringsOffset.val + nameOffset.val);
    wstring name;
    FSeek(pos);
} Arg <read=ReadArg, bgcolor=cYellow, optimize=false>;

wstring ReadArg(Arg& arg) {
    string str;
    SPrintf(str, "%i ", arg.type);
    return str + arg.name;
}


typedef struct (quad baseArgsOffset) {
    Varint id;
    Varint argCount;
    Varint argsOffset;
    Varint nameOffset;
    if (!header.is64Bit) {
        int pad <hidden=true>; Assert(pad == 0);
    }
    
    local quad pos <hidden=true> = FTell();
    FSeek(header.stringsOffset.val + nameOffset.val);
    wstring name;
    if (argCount.val > 0) {
        FSeek(baseArgsOffset + argsOffset.val);
        Arg args[argCount.val];
    }
    FSeek(pos);
} Instr <read=ReadInstr, bgcolor=cAqua, optimize=false>;

wstring ReadInstr(Instr& instr) {
    string str;
    SPrintf(str, "%2i ", instr.id.val);
    return str + instr.name;
}


typedef struct (quad baseInstrsOffset, quad baseArgsOffset) {
    Varint id;
    Varint instrCount;
    Varint instrsOffset;
    Varint nameOffset;
    if (!header.is64Bit) {
        int pad <hidden=true>; Assert(pad == 0);
    }
    
    local quad pos <hidden=true> = FTell();
    FSeek(header.stringsOffset.val + nameOffset.val);
    wstring name;
    if (instrCount.val > 0) {
        FSeek(baseInstrsOffset + instrsOffset.val);
        Instr instructions(baseArgsOffset)[instrCount.val];
    }
    FSeek(pos);
} Class <read=ReadClass, bgcolor=cLtGreen, optimize=false>;

wstring ReadClass(Class& class) {
    string str;
    SPrintf(str, "%4i ", class.id.val);
    return str + class.name;
}

//------------------------------------------------

Header header;
FSeek(header.mainClassesOffset.val);
struct {
    Class mainClasses(header.mainInstrsOffset.val, header.mainArgsOffset.val)[header.mainClassCount.val];
} mainClasses;
