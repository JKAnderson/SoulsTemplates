//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: FMB.bt
//   Authors: TKGP
//   Version: 
//   Purpose: "expression" files introduced in Elden Ring
//  Category: Dantelion
// File Mask: *.expb
//  ID Bytes: 46 4D 42 20
//   History: 
//------------------------------------------------

#include "Util.bt"
LittleEndian();

//------------------------------------------------

typedef struct {
    char magic[4]; Assert(magic == "FMB ");
    int unk04; Assert(unk04 == 1);
    int unk08; Assert(unk08 == 1);
    int unk0C; Assert(unk0C == 0);
    quad offset10 <format=hex>; Assert(offset10 == 0x20);

    // If these are actually offsets then this should really be
    // a few different structs, but since they're static it doesn't matter.
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
    int unk20;
    int unk24; Assert(unk24 == 0);
    quad offset28 <format=hex>; Assert(offset28 == 0x30);

    int unk30; Assert(unk30 == 0);
    int unk34; Assert(unk34 == 0);
    quad offset38 <format=hex>; Assert(offset38 == 0x40);
} Header <bgcolor=cLtRed>;


typedef struct {
    int itemCount;
    int unk04; Assert(unk04 == 0);
    quad offset08 <format=hex>; Assert(offset08 == 0x10);

    quad itemOffsets[itemCount] <format=hex>;
} ItemsHeader <bgcolor=cLtGreen>;


typedef struct {
    int type;
    int pad04 <hidden=true>; Assert(pad04 == 0);
    
    switch (type)
    {
        case 2:
        case 5:
        case 6:
        case 12:
        case 14:
        case 21:
        case 31:
        case 32:
        case 33:
        case 34:
        case 43:
            quad pad08 <hidden=true>; Assert(pad08 == 0);
            quad pad10 <hidden=true>; Assert(pad10 == 0);
            quad pad18 <hidden=true>; Assert(pad18 == 0);
            break;

        case 7:
        case 11:
            quad valueOffset <format=hex>;
            quad pad10 <hidden=true>; Assert(pad10 == 0);
            quad pad18 <hidden=true>; Assert(pad18 == 0);
            
            FSeek(0x40 + valueOffset);
            string value <bgcolor=cGreen>;
            break;

        case 1:
        case 3:
        case 4:
        case 8:
        case 51:
        case 61:
            double value;
            quad pad10 <hidden=true>; Assert(pad10 == 0);
            quad pad18 <hidden=true>; Assert(pad18 == 0);
            break;

        case 52:
            double value1;
            double value2;
            quad pad18 <hidden=true>; Assert(pad18 == 0);
            break;

        default: Assert(false);
    }
} Item <read=ReadItem, bgcolor=cAqua>;

string ReadItem(Item &item) {
    string str;
    if (exists(item.valueOffset))
        return SPrintf(str, "%2i : %s", item.type, item.value);
    else if (exists(item.value))
        return SPrintf(str, "%2i : %d", item.type, item.value);
    else if (exists(item.value1))
        return SPrintf(str, "%2i : %d, %d", item.type, item.value1, item.value2);
    else
        return SPrintf(str, "%2i", item.type);
}

//------------------------------------------------

Header header;
ItemsHeader itemsHeader;
struct {
    local int i <hidden=true>;
    for (i = 0; i < itemsHeader.itemCount; i++) {
        FSeek(0x40 + itemsHeader.itemOffsets[i]);
        Item items;
    }
} items <open=true>;
