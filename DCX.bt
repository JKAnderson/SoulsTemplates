//------------------------------------------------
//--- 010 Editor v9.0.1 Binary Template
//
//      File: DCX.bt
//   Authors: TKGP
//   Version: 
//   Purpose: FromSoft compression format
//  Category: Dantelion
// File Mask: *.dcx
//  ID Bytes: 44 43 58 00
//   History: 
//------------------------------------------------

BigEndian();

//------------------------------------------------

typedef struct {
    int unk00; Assert(unk00 == 0);
    int dataOffset;
    int dataLength;
    int unk0C; Assert(unk0C == 1);
} Block <bgcolor=cLtGreen, optimize=false>;

typedef struct {
    char dcx[4]; Assert(dcx == "DCX\0");
    int unk04; Assert(unk04 == 0x10000 || unk04 == 0x11000);
    int dcsOffset <format=hex>; Assert(dcsOffset == 0x18);
    int dcpOffset <format=hex>; Assert(dcpOffset == 0x24);
    int unk10; Assert(unk10 == 0x24 || unk10 == 0x44);
    int unk14; // In EDGE, size from 0x20 to end of block headers
    char dcs[4]; Assert(dcs == "DCS\0");
    uint uncompressedSize <format=hex>;
    uint compressedSize <format=hex>;
    char dcp[4]; Assert(dcp == "DCP\0");
    char format[4]; Assert(format == "DFLT" || format == "EDGE" || format == "KRAK");
    int unk2C; Assert(unk2C == 0x20);
    byte unk30; Assert(unk30 == 6|| unk30 == 8 || unk30 == 9); // Compression param?
    byte unk31 <hidden=true>; Assert(unk31 == 0);
    byte unk32 <hidden=true>; Assert(unk32 == 0);
    byte unk33 <hidden=true>; Assert(unk33 == 0);
    int unk34; Assert(unk34 == 0 || unk34 == 0x10000); // Block size for EDGE?
    byte unk38; Assert(unk38 == 0 || unk38 == 15);
    byte unk39 <hidden=true>; Assert(unk39 == 0);
    byte unk3A <hidden=true>; Assert(unk3A == 0);
    byte unk3B <hidden=true>; Assert(unk3B == 0);
    int unk3C; Assert(unk3C == 0);
    int unk40;
    char dca[4]; Assert(dca == "DCA\0");
    int dcaSize; // From before "DCA" to dca end
    
    if (format == "EDGE") {
        char egdt[4]; Assert(egdt == "EgdT");
        int unk50; Assert(unk50 == 0x10100);
        int unk54; Assert(unk54 == 0x24);
        int unk58; Assert(unk58 == 0x10);
        int unk5C; Assert(unk5C == 0x10000);
        int lastBlockUncompressedSize;
        int egdtSize; // From before "EgdT" to dca end
        int blockCount;
        int unk6C; Assert(unk6C == 0x100000);
        Block blocks[blockCount];
    }
} Header <bgcolor=cLtRed>;

//------------------------------------------------

Header header <open=true>;

if (header.format == "DFLT" || header.format == "KRAK") {
    ubyte bytes[header.compressedSize] <bgcolor=cAqua>;
} else if (header.format == "EDGE") {
    local quad dataStart <format=hex> = FTell();
    local int i <hidden=true>;
    for (i = 0; i < header.blockCount; i++) {
        FSeek(dataStart + header.blocks[i].dataOffset);
        struct { ubyte data[header.blocks[i].dataLength]; } data <bgcolor=cAqua>;
    }
}
