//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: SMD.bt
//   Authors: TKGP
//   Version: 
//   Purpose: metaparam files introduced in Elden Ring
//  Category: Dantelion
// File Mask: *.metaparam
//  ID Bytes: 53 4D 44 00
//   History: 
//------------------------------------------------

#include "Util.bt"
LittleEndian();

struct StructB;

//------------------------------------------------

typedef struct {
    char magic[4]; Assert(magic == "SMD\0");
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == 6);
    int count0C;
    quad offset10 <format=hex>;
    quad offset18 <format=hex>;
    quad offset20 <format=hex>;
    int count28;
    int unk2C;
    int unk30;
    int unk34;
    int unk38;
    int unk3C; Assert(unk3C == 0);
    int unk40;
    int unk44; Assert(unk44 == 0);
    int unk48;
    int unk4C;
    int unk50;
    int unk54;
    int unk58;
    int unk5C <hidden=true>; Assert(unk5C == 0);
    int unk60 <hidden=true>; Assert(unk60 == 0);
    int unk64 <hidden=true>; Assert(unk64 == 0);
    int unk68 <hidden=true>; Assert(unk68 == 0);
    int unk6C <hidden=true>; Assert(unk6C == 0);
    int unk70 <hidden=true>; Assert(unk70 == 0);
    int unk74 <hidden=true>; Assert(unk74 == 0);
    int unk78 <hidden=true>; Assert(unk78 == 0);
    int unk7C <hidden=true>; Assert(unk7C == 0);
    int unk80 <hidden=true>; Assert(unk80 == 0);
    int unk84 <hidden=true>; Assert(unk84 == 0);
    int unk88 <hidden=true>; Assert(unk88 == 0);
    int unk8C <hidden=true>; Assert(unk8C == 0);
} Header <bgcolor=cLtRed>;


typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04; Assert(unk04 == 0);
    quad offset08 <format=hex>;
    byte unk10; Assert(unk10 == 0x10);
    byte unk11; // Index?
    byte unk12; Assert(unk12 == 0);
    byte unk13;
    int unk14; Assert(unk14 == -1);
    quad offset18 <format=hex>;
    quad offset20 <format=hex>;
    int unk28; Assert(unk28 == 0);
    int unk2C; Assert(unk2C == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(offset08);
    wstring str08 <bgcolor=cGreen>;
    FSeek(offset18);
    wstring str18 <bgcolor=cGreen>;
    FSeek(offset20);
    wstring str20 <bgcolor=cGreen>;
    FSeek(pos);
} StructA <read=ReadStructA, bgcolor=cLtGreen, optimize=false>;

wstring ReadStructA(StructA &structA) {
    return structA.str08;
}


typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04; Assert(unk04 == 0);
    quad offset08 <format=hex>;
    int count10; Assert(count10 == 5);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
    int unk20; Assert(unk20 == 0);
    int unk24; Assert(unk24 == 0);
    int unk28; Assert(unk28 == 0);
    int unk2C; Assert(unk2C == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(offset08);
    struct { StructB structBs[count10]; } structBs;
    FSeek(pos);
} Footer <bgcolor=cAqua>;


typedef struct {
    int unk00;
    int unk04; Assert(unk04 == 0);
    int unk08;
    int unk0C; Assert(unk0C == 0);
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
} StructB <bgcolor=cDkAqua, optimize=false>;


typedef struct {
    quad offset00 <format=hex>;
    int unk08; Assert(unk08 == 0);
    int unk0C; Assert(unk0C == 0);
    int unk10; Assert(unk10 == 0);
    int unk14; Assert(unk14 == 0);
    int unk18; Assert(unk18 == 0);
    int unk1C; Assert(unk1C == 0);
    int unk20; Assert(unk20 == 0);
    int unk24; Assert(unk24 == 0);
    int unk28;
    int unk2C;
    int unk30;
    float unk34;
    int unk38;
    int unk3C; Assert(unk3C == 0);
    int unk40 <hidden=true>; Assert(unk40 == 0);
    int unk44 <hidden=true>; Assert(unk44 == 0);
    int unk48 <hidden=true>; Assert(unk48 == 0);
    int unk4C <hidden=true>; Assert(unk4C == 0);
    int unk50 <hidden=true>; Assert(unk50 == 0);
    int unk54 <hidden=true>; Assert(unk54 == 0);
    int unk58 <hidden=true>; Assert(unk58 == 0);
    int unk5C <hidden=true>; Assert(unk5C == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(offset00);
    wstring str00;
    FSeek(pos);
} StructC <read=ReadStructC, bgcolor=cYellow, optimize=false>;

wstring ReadStructC(StructC &structC) {
    return structC.str00;
}

//------------------------------------------------

Header header;
if (header.count0C) {
    struct { StructA structAs[header.count0C]; } structAs;
}
Footer footer;
if (header.count28) {
    struct { StructC structCs[header.count28]; } structCs;
}
