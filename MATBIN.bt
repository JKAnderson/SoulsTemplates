//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: MATBIN.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Material configs introduced in Elden Ring
//  Category: Dantelion
// File Mask: *.matbin
//  ID Bytes: 4D 41 42 00
//   History: 
//------------------------------------------------

#include "Util.bt"
LittleEndian();

//------------------------------------------------

typedef struct {
    char magic[4]; Assert(magic == "MAB\0");
    int unk04; Assert(unk04 == 2);
    quad shaderPathOffset <format=hex>;
    quad sourcePathOffset <format=hex>;
    // I speculate that this value and the others below are keys for some
    // form of documentation. They appear random, but they match for params
    // or samplers of matching names/types.
    int key <format=hex>;
    int paramCount;
    int samplerCount;
    int unk24 <hidden=true>; Assert(unk24 == 0);
    int unk28 <hidden=true>; Assert(unk28 == 0);
    int unk2C <hidden=true>; Assert(unk2C == 0);
    int unk30 <hidden=true>; Assert(unk30 == 0);
    int unk34 <hidden=true>; Assert(unk34 == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(shaderPathOffset);
    wstring shaderPath <bgcolor=cRed>;
    
    FSeek(sourcePathOffset);
    wstring sourcePath <bgcolor=cRed>;
    FSeek(pos);
} Header <bgcolor=cLtRed, optimize=false>;


typedef struct {
    quad nameOffset <format=hex>;
    quad valueOffset <format=hex>;
    int key <format=hex>;
    int type;
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
    int unk20 <hidden=true>; Assert(unk20 == 0);
    int unk24 <hidden=true>; Assert(unk24 == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(nameOffset);
    wstring name <bgcolor=cGreen>;
    
    FSeek(valueOffset);
    SetBackColor(cDkGreen);
    switch (type) {
        case 0: byte value; Assert(IsBool(value)); break;
        case 4: int value; break;
        case 5: int value[2]; break;
        case 8: float value; break;
        case 9: float value[2]; break;
        // For colors using this type, there are 5 floats.
        // For other values using this type, there are 3 floats.
        // Yes, I do hate it. The additional floats do not seem to be used.
        case 10: float value[3]; break;
        case 11: float value[4]; break;
        case 12: float value[5]; break;
        
        default: Assert(false);
    }
    FSeek(pos);
} Param <read=ReadParam, bgcolor=cLtGreen, optimize=false>;

wstring ReadParam(Param& param) {
    string str;
    switch (param.type) {
        case 0:
        case 4: SPrintf(str, "%i",
            param.value); break;
        case 5: SPrintf(str, "%i, %i",
            param.value[0], param.value[1]); break;
        case 8: SPrintf(str, "%.2f",
            param.value); break;
        case 9: SPrintf(str, "%.2f, %.2f",
            param.value[0], param.value[1]); break;
        case 10: SPrintf(str, "%.2f, %.2f, %.2f, %.2f, %.2f",
            param.value[0], param.value[1], param.value[2], param.value[3], param.value[4]); break;
        case 11: SPrintf(str, "%.2f, %.2f, %.2f, %.2f",
            param.value[0], param.value[1], param.value[2], param.value[3]); break;
        case 12: SPrintf(str, "%.2f, %.2f, %.2f, %.2f, %.2f",
            param.value[0], param.value[1], param.value[2], param.value[3], param.value[4]); break;
    }
    return param.name + " = " + str;
}


typedef struct {
    quad typeOffset <format=hex>;
    quad pathOffset <format=hex>;
    int key <format=hex>;
    Vector2 unk14; // Presumably scale, but usually 0, 0
    int unk1C <hidden=true>; Assert(unk1C == 0);
    int unk20 <hidden=true>; Assert(unk20 == 0);
    int unk24 <hidden=true>; Assert(unk24 == 0);
    int unk28 <hidden=true>; Assert(unk28 == 0);
    int unk2C <hidden=true>; Assert(unk2C == 0);
    
    local quad pos <hidden=true> = FTell();
    FSeek(typeOffset);
    wstring type <bgcolor=cLtBlue>;
    
    FSeek(pathOffset);
    wstring path <bgcolor=cLtBlue>;
    FSeek(pos);
} Sampler <read=ReadSampler, bgcolor=cAqua, optimize=false>;

wstring ReadSampler(Sampler& sampler) {
    return sampler.type + " = " + sampler.path;
}

//------------------------------------------------

Header header;
struct { Param params[header.paramCount]; } params;
struct { Sampler samplers[header.samplerCount]; } samplers;
