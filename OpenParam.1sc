//------------------------------------------------
//--- 010 Editor v2.0 Script File
//
//      File: OpenParam.1sc
//   Authors: dece
//   Version: 1.0
//   Purpose: Parse both PARAMDEF and PARAM files
//  Category: Binary
//
// Run the PARAMDEF template on a PARAMDEF file, load the original
// PARAM template to replace the original dummy parsing with PARAMDEF
// aware types and run it on a PARAM file.
//------------------------------------------------
RequiresVersion(4.0);

// Run PARAMDEF template.
char paramdef_path[512];
paramdef_path = InputOpenFileName("Open PARAMDEF");
if (Strlen(paramdef_path) == 0)
    return -1;
FileOpen(paramdef_path);
RunTemplate("PARAMDEF.bt");

// Extract field information, Python struct style for types.
int num_fields = header.fieldCount;
int sizes[num_fields];
char types[num_fields + 1];
types[num_fields] = '\0';
int bit_sizes[num_fields];

int GetBitSize(char name[]) {
    int index = Strchr(name, ':');
    if (index == -1)
        return -1;
    return Atoi(SubStr(name, index + 1));
}

int i;
for (i = 0; i < num_fields; ++i) {
    if (Strcmp("s8", fields.fields[i].displayType) == 0) types[i] = 'b';
    else if (Strcmp("u8", fields.fields[i].displayType) == 0) types[i] = 'B';
    else if (Strcmp("s16", fields.fields[i].displayType) == 0) types[i] = 'h';
    else if (Strcmp("u16", fields.fields[i].displayType) == 0) types[i] = 'H';
    else if (Strcmp("s32", fields.fields[i].displayType) == 0) types[i] = 'i';
    else if (Strcmp("u32", fields.fields[i].displayType) == 0) types[i] = 'I';
    else if (Strcmp("s64", fields.fields[i].displayType) == 0) types[i] = 'q';
    else if (Strcmp("u64", fields.fields[i].displayType) == 0) types[i] = 'Q';
    else if (Strcmp("f32", fields.fields[i].displayType) == 0) types[i] = 'f';
    else if (Strcmp("f64", fields.fields[i].displayType) == 0) types[i] = 'd';
    else types[i] = 's';
    sizes[i] = fields.fields[i].byteCount;
    bit_sizes[i] = header.formatVersion >= 102 ? GetBitSize(fields.fields[i].internalName) : 0;
    Printf("Field %d has type %s (byte count %d, bit size %d)\n",
           i, fields.fields[i].displayType, sizes[i], bit_sizes[i]);

}
Printf("Types: %s\n", types);
FileClose();

// Copy original PARAM.bt parts.
char param_bt_path[512];
param_bt_path = InputOpenFileName("Open PARAM binary template");
if (Strlen(param_bt_path) == 0)
    return -1;
FileOpen(param_bt_path);
char param_bt[FileSize()];
ReadBytes(param_bt, 0, FileSize());
int match_size;
int data_parsing_start = RegExSearch(param_bt, "^.*ubyte data.*// OpenParam mark.$", match_size);
int data_parsing_end = data_parsing_start + match_size;
char param_bt_before[];
param_bt_before = SubStr(param_bt, 0, data_parsing_start);
char param_bt_after[];
param_bt_after = SubStr(param_bt, data_parsing_end);
FileClose();

// Generate new PARAM.bt file with accurate fields formats.
FileNew();
int offset = 0;
WriteBytes(param_bt_before, 0, Strlen(param_bt_before));
offset += Strlen(param_bt_before);
char field_name[];
char bf[];
char field_str[];
for (i = 0; i < num_fields; ++i) {
    SPrintf(field_name, "field_%d", i);
    if (bit_sizes[i] != -1)
        SPrintf(bf, ": %d", bit_sizes[i]);
    else
        bf = "";
    switch (types[i]) {
        case 'b': SPrintf(field_str, "byte %s%s;\n", field_name, bf); break;
        case 'B': SPrintf(field_str, "unsigned byte %s%s;\n", field_name, bf); break;
        case 'h': SPrintf(field_str, "short %s%s;\n", field_name, bf); break;
        case 'H': SPrintf(field_str, "unsigned short %s%s;\n", field_name, bf); break;
        case 'i': SPrintf(field_str, "int %s%s;\n", field_name, bf); break;
        case 'I': SPrintf(field_str, "unsigned int %s%s;\n", field_name, bf); break;
        case 'q': SPrintf(field_str, "quad %s%s;\n", field_name, bf); break;
        case 'Q': SPrintf(field_str, "unsigned quad %s%s;\n", field_name, bf); break;
        case 'f': SPrintf(field_str, "float %s%s;\n", field_name, bf); break;
        case 'd': SPrintf(field_str, "double %s%s;\n", field_name, bf); break;
        default: SPrintf(field_str, "char %s[%d]%s;\n", field_name, sizes[i], bf);
    }
    WriteString(offset, field_str);
    offset += Strlen(field_str);
}
WriteBytes(param_bt_after, offset, Strlen(param_bt_after));
char new_param_bt_path[512];
new_param_bt_path = GetTempFileName();
FileSave(new_param_bt_path);
FileClose();

// Run the new template on a PARAM file.
char param_path[512];
param_path = InputOpenFileName("Open PARAM");
if (Strlen(param_path) == 0)
    return -1;
FileOpen(param_path);
RunTemplate(new_param_bt_path);