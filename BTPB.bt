//------------------------------------------------
//--- 010 Editor v10.0.1 Binary Template
//
//      File: BTPB.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Light probes for DS2, BB, and DS3 maps.
//  Category: Dantelion
// File Mask: *.btpb
//  ID Bytes: 
//   History: 
//------------------------------------------------

local int VARINT_LONG;
#include "Util.bt"
LittleEndian();
if (ReadByte(0x10))
    BigEndian();

enum VERSION { VERSION_DS2, VERSION_BB, VERSION_DS3 };

//------------------------------------------------

typedef struct {
    int unk00; // Version?
    int unk04;
    int groupCount;
    int dataLength <format=hex>;
    byte bigEndian; Assert(bigEndian == 0 || bigEndian == 1);
    byte pad[3] <hidden=true>; Assert((pad[0] | pad[1] | pad[2]) == 0);
    int groupSize <format=hex>;
    int probeSize <format=hex>;
    Vector3 unk1C; // Bounding box min?
    Vector3 unk28; // Bounding box max?
    int unk34 <hidden=true>; Assert(unk34 == 0);
    int unk38 <hidden=true>; Assert(unk38 == 0);
    
    local VERSION version;
    if      (unk00 == 2 && unk04 == 1 && groupSize == 0x40 && probeSize == 0x1C)
        version = VERSION_DS2;
    else if (unk00 == 2 && unk04 == 1 && groupSize == 0x48 && probeSize == 0x48)
        version = VERSION_BB;
    else if (unk00 == 3 && unk04 == 0 && groupSize == 0x98 && probeSize == 0x48)
        version = VERSION_DS3;
    else
        Assert(false);
    
    VARINT_LONG = version >= VERSION_BB;
} Header <bgcolor=cLtRed>;


typedef struct {
    short coefficients[12];
    short lightMask;
    short unk1A; // Always 0 outside the chalice btpb
    
    if (header.version >= VERSION_BB) {
        Vector3 position;
        int unk28 <hidden=true>; Assert(unk28 == 0);
        int unk2C <hidden=true>; Assert(unk2C == 0);
        int unk30 <hidden=true>; Assert(unk30 == 0);
        int unk34 <hidden=true>; Assert(unk34 == 0);
        int unk38 <hidden=true>; Assert(unk38 == 0);
        int unk3C <hidden=true>; Assert(unk3C == 0);
        int unk40 <hidden=true>; Assert(unk40 == 0);
        int unk44 <hidden=true>; Assert(unk44 == 0);
    }
} Probe <bgcolor=cLtGreen, optimize=false>;


typedef struct {
    Varint nameOffset;
    int flags08; // Just guessing, but 1 has name string, 0 and 2 don't
    int probeCount;
    int unk10;
    int unk14;
    int unk18;
    float unk1C;
    float unk20;
    float unk24;
    Vector3 unk28; // Bounding box min?
    Vector3 unk34; // Bounding box max?
    Varint probesOffset;
    
    if (header.version >= VERSION_DS3) {
        float unk48;
        float unk4C;
        float unk50;
        int unk54 <hidden=true>; Assert(unk54 == 0);
        int unk58 <hidden=true>; Assert(unk58 == 0);
        int unk5C <hidden=true>; Assert(unk5C == 0);
        int unk60 <hidden=true>; Assert(unk60 == 0);
        int unk64 <hidden=true>; Assert(unk64 == 0);
        int unk68 <hidden=true>; Assert(unk68 == 0);
        int unk6C <hidden=true>; Assert(unk6C == 0);
        int unk70 <hidden=true>; Assert(unk70 == 0);
        int unk74 <hidden=true>; Assert(unk74 == 0);
        int unk78 <hidden=true>; Assert(unk78 == 0);
        int unk7C <hidden=true>; Assert(unk7C == 0);
        int unk80 <hidden=true>; Assert(unk80 == 0);
        int unk84 <hidden=true>; Assert(unk84 == 0);
        int unk88 <hidden=true>; Assert(unk88 == 0);
        int unk8C <hidden=true>; Assert(unk8C == 0);
        int unk90 <hidden=true>; Assert(unk90 == 0);
        int unk94; // Usually 0
    }
    
    local quad pos <hidden=true> = FTell();
    if (flags08 & 1) {
        FSeek(dataStart + nameOffset.val);
        wstring name;
    }
    FSeek(dataStart + probesOffset.val);
    struct { Probe probes[probeCount]; } probes;
    FSeek(pos);
} Group <read=ReadGroup, bgcolor=cAqua, optimize=false>;

wstring ReadGroup(Group &group) {
    if (group.flags08 & 1)
        return group.name;
    else
        return "";
}

//------------------------------------------------

Header header;
local quad dataStart <format=hex> = FTell();
FSkip(header.dataLength);
struct { Group groups[header.groupCount]; } groups <open=true>;
