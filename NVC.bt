//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: NVC.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Elden Ring .nvc files
//  Category: Dantelion
// File Mask: *.nvc
//  ID Bytes: 4E 56 4D 43
//   History: 
//------------------------------------------------

#include "Util.bt"
LittleEndian();

struct Data0;
struct Data1;
struct Data2;
struct Data3;
struct Data4;

//------------------------------------------------

typedef struct {
    char magic[4]; Assert(magic == "NVMC");
    int unk04; Assert(unk04 == 3);
    int fileSize <format=hex>;
    int count; Assert(count == 5);
} Header <bgcolor=cLtRed>;


typedef struct {
    int type; Assert(type >= 0 && type <= 4);
    int unk04; Assert(unk04 == 1);
    int length <format=hex>;
    int count;
    
    SetBackColor(cAqua);
    if (count > 0) {
        switch (type) {
            case 0: struct { Data0 data0[count]; } data0; break;
            case 1: Data1 data1[count]; break;
            case 2: Data2 data2[count]; break;
            case 3: struct { Data3 data3[count]; } data3; Assert(count == 1); break;
            case 4: Data4 data4[count]; break;
            
            default: Assert(false);
        }
    }
} Block <read=ReadBlock, bgcolor=cLtGreen, optimize=false>;

string ReadBlock(Block& block) {
    string str;
    return SPrintf(str, "%i [%3i]", block.type, block.count);
}


typedef struct {
    uint unk00;
    uint unk04;
    int count08; // Count in Data1
    int unk0C; Assert(unk0C == 0);
    int index10; // ""
    int unk14 <hidden=true>; Assert(unk14 == 0);
    int unk18 <hidden=true>; Assert(unk18 == 0);
    int unk1C <hidden=true>; Assert(unk1C == 0);
} Data0 <optimize=false>;

typedef struct {
    int unk00;
    int unk04;
    int unk08;
    int unk0C;
} Data1 <read=ReadData1>;

string ReadData1(Data1& data1) {
    string str;
    return SPrintf(str, "%8i %8i %8i %8i",
        data1.unk00, data1.unk04, data1.unk08, data1.unk0C);
}

typedef struct {
    Assert(false);
} Data2;

typedef struct {
    ubyte unk00[8];
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0C <hidden=true>; Assert(unk0C == 0);
} Data3 <optimize=false>;

typedef struct {
    Assert(false);
} Data4;

//------------------------------------------------

Header header;
struct { Block blocks[header.count]; } blocks <open=true>;
