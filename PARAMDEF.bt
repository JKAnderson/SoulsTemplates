//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: PARAMDEF.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Companion file that describes a param's row data structure
//  Category: Dantelion
// File Mask: *.def,*.paramdef
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "Util.bt"

LittleEndian();
if (ReadByte(0x2C) == -1)
    BigEndian();

//------------------------------------------------

typedef struct {
    int fileSize <format=hex>;
    // Header size, or just a short fields offset? Who knows.
    short headerSize <format=hex>; Assert(headerSize == 0x30 || headerSize == 0xFF);
    // Incremented when the actual param data structure changes (sometimes)
    short dataVersion;
    short fieldCount;
    short fieldSize <format=hex>;
    
    local short formatVer <hidden=true> = ReadShort(0x2E);
    Assert(formatVer == 101 && fieldSize == 0x8C
        || formatVer == 102 && fieldSize == 0xAC
        || formatVer == 103 && fieldSize == 0x6C
        || formatVer == 104 && fieldSize == 0xB0
        || formatVer == 106 && fieldSize == 0x48
        || formatVer == 201 && fieldSize == 0xD0
        || formatVer == 202 && fieldSize == 0x68
        || formatVer == 203 && fieldSize == 0x88);
    
    if (formatVer >= 202) {
        int typePad1 <hidden=true>; Assert(!typePad1);
        OffsetString paramType(1, 0);
        quad typePad2 <hidden=true>; Assert(!typePad2);
        quad typePad3 <hidden=true>; Assert(!typePad3);
        int typePad4 <hidden=true>; Assert(!typePad4);
    } else if (formatVer >= 106) {
        OffsetString paramType(0, 0);
        quad typePad1 <hidden=true>; Assert(!typePad1);
        quad typePad2 <hidden=true>; Assert(!typePad2);
        quad typePad3 <hidden=true>; Assert(!typePad3);
        int typePad4 <hidden=true>; Assert(!typePad4);
    } else {
        char paramID[0x20] <bgcolor=cRed>;
    }
    
    byte bigEndian; Assert(bigEndian == 0 || bigEndian == -1);
    byte unicode; Assert(IsBool(unicode));
    short formatVersion; Assert(formatVersion == formatVer);
    
    if (formatVer >= 201) {
        quad fieldsOffset <format=hex>; Assert(fieldsOffset == 0x38);
    }
} Header <bgcolor=cLtRed>;


typedef struct (char editorType[8]) {
    local char type[8] = editorType;
    switch (type) {
        case "u8":
        case "s8":
        case "u16":
        case "s16":
        case "u32": // Sometimes u32 has s32 values; other times it has u32 values. Cool!
        case "s32": int value; break;
        case "f32": float value; break;
        case "dummy8":
        case "fixstr":
        case "fixstrW": int dummy; Assert(!dummy); break;
        default: Assert(false);
    }
    
    int pad <hidden=true>; Assert(!pad);
} EditorValue <read=ReadEditorValue>;

string ReadEditorValue(EditorValue &value) {
    string str;
    switch (value.type) {
        case "u8":
        case "s8":
        case "u16":
        case "s16":
        case "u32":
        case "s32": return SPrintf(str, "%i", value.value);
        case "f32": return SPrintf(str, "%f", value.value);
        case "dummy8":
        case "fixstr":
        case "fixstrW": return "";
        default: Assert(False);
    }
}

typedef struct {
    if (header.formatVersion >= 202) {
        quad editorNameOffset <format=hex>;
    } else if (header.formatVersion >= 106 && header.formatVersion < 200) {
        int editorNameOffset <format=hex>;
    } else if (header.unicode) {
        wchar_t editorName[0x20] <bgcolor=cGreen>;
    } else {
        char editorName[0x40] <bgcolor=cGreen>;
    }
    
    char editorType[0x8] <bgcolor=cGreen>;
    char editorFormat[0x8] <bgcolor=cGreen>;
    
    if (header.formatVersion >= 203) {
        quad oldValuePad1 <hidden=true>; Assert(!oldValuePad1);
        quad oldValuePad2 <hidden=true>; Assert(!oldValuePad2);
    } else {
        float defaultValue;
        float minimum;
        float maximum;
        float increment;
    }
    
    enum <int> { EDIT_WRAP = 1, EDIT_LOCK = 4 } editorFlags;
    int byteCount;
    
    if (header.formatVersion >= 200) {
        quad descriptionOffset <format=hex>;
    } else {
        int descriptionOffset <format=hex>;
    }
    
    if (header.formatVersion >= 202) {
        quad engineTypeOffset <format=hex>;
    } else if (header.formatVersion >= 106 && header.formatVersion < 200) {
        int engineTypeOffset <format=hex>;
    } else {
        char engineType[0x20] <bgcolor=cGreen>;
    }
    
    if (header.formatVersion >= 202) {
        quad engineNameOffset <format=hex>;
    } else if (header.formatVersion >= 106 && header.formatVersion < 200) {
        int engineNameOffset <format=hex>;
    } else if (header.formatVersion >= 102) {
        char engineName[0x20] <bgcolor=cGreen>;
    }

    if (header.formatVersion >= 104) {
        int sortID;
    }
    
    // This space existed as of 201, but wasn't used until 202
    if (header.formatVersion >= 201) {
        int unkB4 <hidden=true>; Assert(!unkB4);
        quad offsetB8 <format=hex>;
        quad offsetC0 <format=hex>;
        quad offsetC8 <format=hex>;
    } else if (header.formatVersion >= 106) {
        // I assume these are the same as above, but I have no non-trivial samples
        int offset3C <format=hex>; Assert(!offset3C);
        int offset40 <format=hex>; Assert(!offset40);
        int offset44 <format=hex>; Assert(!offset44);
    }

    if (header.formatVersion >= 203) {
        EditorValue defaultValue(editorType);
        EditorValue minimum(editorType);
        EditorValue maximum(editorType);
        EditorValue increment(editorType);
    }
    
    local quad pos <hidden=true> = FTell();
    if (descriptionOffset) {
        FSeek(descriptionOffset);
        if (header.unicode) {
            wstring description;
        } else {
            string description;
        }
    }
    
    if (header.formatVersion >= 201) {
        if (offsetB8) {
            FSeek(offsetB8);
            string strB8;
        }
        if (offsetC0) {
            FSeek(offsetC0);
            string strC0;
        }
        if (offsetC8) {
            FSeek(offsetC8);
            wstring strC8;
        }
    }

    if (exists(editorNameOffset)) {
        FSeek(editorNameOffset);
        wstring editorName;
        FSeek(engineTypeOffset);
        string engineType;
        FSeek(engineNameOffset);
        string engineName;
    }
    FSeek(pos);
} Field <read=ReadField, bgcolor=cLtGreen, optimize=false>;

wstring ReadField(Field &field) {
    string str = field.engineType;
    if (field.editorType != field.engineType)
        str += " <" + field.editorType + ">";
    if (exists(field.engineName))
        str += " " + field.engineName;
    str += "  ";
    if (header.unicode)
        return str + field.editorName;
    else
        return str + StringToWString(field.editorName, CHARSET_JAPANESE);
}

//------------------------------------------------

Header header;
struct { Field fields[header.fieldCount]; } fields <open=true>;
